{"version":3,"sources":["n1-main/m1-ui/components/modal/Modals.module.css","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/auth-api.ts","n1-main/m2-bll/registerReducer.ts","n1-main/m1-ui/components/registration/Registration.tsx","n1-main/m3-dal/forgot-api.ts","n1-main/m2-bll/forgotReducer.ts","n1-main/m1-ui/components/forgotPassword/ForgotPassword.tsx","n1-main/m2-bll/profileReducer.ts","n1-main/m2-bll/appReducer.ts","n1-main/m2-bll/loginReducer.tsx","n1-main/m1-ui/components/profile/Profile.tsx","n1-main/m1-ui/components/login/Login.tsx","n1-main/m1-ui/common/validators.ts.js","n1-main/m3-dal/packs-api.ts","n1-main/m2-bll/packReducer.ts","n1-main/m1-ui/components/searchPack/SearchPack.tsx","n1-main/m1-ui/common/Loader/__Iphone-spinner-1.gif","n1-main/m1-ui/common/Loader/Loading.tsx","n1-main/m1-ui/components/modal/Modal.tsx","n1-main/m1-ui/components/modal/ModalDelete.tsx","n1-main/m1-ui/components/modal/ModalUpdate.tsx","n1-main/m1-ui/components/modal/ModalAddPack.tsx","n1-main/m1-ui/components/paginator_searchPack/Paginator.tsx","n1-main/m3-dal/cards-api.ts","n1-main/m2-bll/cardsReducer.ts","n1-main/m1-ui/components/SortComponent/SortPacks.tsx","n1-main/m1-ui/components/packs/Packs.tsx","n1-main/m1-ui/components/forgotPassword/NewPassword.tsx","n1-main/m1-ui/components/modal/ModalDeleteCards.tsx","n1-main/m1-ui/components/modal/ModalUpdateCards.tsx","n1-main/m1-ui/components/modal/ModalAddCards.tsx","n1-main/m1-ui/components/searchPack/SearchCards.tsx","n1-main/m1-ui/components/cards/Cards.tsx","n1-main/m1-ui/components/cardComponent/card.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/searchReducer.tsx","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/components/profile/Profile.module.css","n1-main/m1-ui/components/login/Login.module.css","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/components/forgotPassword/ForgotPassword.module.css","n1-main/m1-ui/components/registration/Registration.module.css","n1-main/m1-ui/components/searchPack/searchPack.module.css","n1-main/m1-ui/components/packs/Packs.module.css","n1-main/m1-ui/components/paginator_searchPack/Paginator.module.css","n1-main/m1-ui/components/SortComponent/SortPacks.module.css","n1-main/m1-ui/components/cards/Cards.module.css","n1-main/m1-ui/common/Loader/loading.module.css"],"names":["module","exports","Header","name","useSelector","state","profile","isLoggedIn","login","className","s","nav","item","to","activeClassName","active","Button","id","onBlur","disabled","onClick","primary","size","backgroundColor","label","props","mode","type","join","style","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","email","password","initialState","isRegistered","setError","Registration","dispatch","useDispatch","ApiError","register","useState","setEmail","setPassword","confirmPassword","setConfirmPassword","errorPassword","setErrorPassword","background","registerBlock","registerForm","htmlFor","registerFormInput","onChange","e","target","value","event","length","then","res","statusText","catch","err","text","response","error","alert","SendRegisterTC","formSummaryError","PasswordAPI","message","from","resetPasswordToken","info","isInitialized","forgotPassword","setForgotPassword","resetPasswordInfo","setForgotPasswordError","ForgotPassword","React","memo","onClickBtn","useCallback","a","forgotPasswordTC","forgotPasswordBlock","currentTarget","trim","display","marginLeft","marginRight","marginBottom","marginTop","errorText","_id","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","setProfileDataAC","setLoginErrorAC","status","setIsInitializedAC","setIsLoggedInAC","Profile","ava","wrapProfile","wrapAva","backgroundImage","wrapInfo","infoBlock","titles","Login","onClickHandler","console","log","loginTC","LoginContent","setRememberMe","emailError","setEmailError","passwordError","setPasswordError","RegExp","test","minLength","maxLength","result","minMaxLength","check","inputcheck","checked","PacksAPI","page","userID","get","packName","min","max","sortPacks","objcardsPack","objUpdatePack","put","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","pageCount","portionSize","setPacks","setPacksInfo","packsInfo","setPacksError","setSortPacks","setCurrentPageAC","setCardPacksTotalCountAC","getPacksTC","pageN","getState","search","action","getSortPacksTC","SearchPack","packs","setPackName","setMin","setMax","searchPack","getPacksSearchNameTC","search_table","arr","slider","range","draggableTrack","defaultValue","fontSize","color","Loading","loadingStyle","src","spiner","alt","Modal","enableBackground","backgroundOnClick","modalOnClick","show","children","divBackgroundTransparent","divModal","ModalDelete","button","backgroundStyle","modalStyle","close","f","deletePack","closeBtn","rowBtn","ModalUpdate","newName","setNewName","saveInputs","setSaveInputs","setNameInput","unpdatePackTC","cardsPack","ModalAddPack","newcard","addPackTC","Paginator","currentPage","myId","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","filter","p","map","cn","selectedPage","pageNumber","onPageChanged","CardsAPI","cardsPackID","cardAnswer","cardQuestion","objcards","grade","cards","cardsTotalCount","maxGrade","minGrade","packUserId","cardToLearn","currentIDpack","currentIDcard","setCards","getCardTC","packID","cardsInfo","SortPacks","sortPack","upSortPacks","property","downSortPacks","up","setUp","down","setDown","sortContainer","substr","Packs","setShow","showUpdateModal","setShowUpdateModal","update","setUpdate","showModalDelete","setShowModalDelete","showAllPack","setshowAllPacks","useEffect","Boolean","table","heading","packData","cardsCount","PacksContainer","NewPassword","token","useParams","resetNewPassword","ModalDeleteCards","idCArd","idCard","idPack","deleteCardTC","ModalUpdateCards","question","setQuestion","comments","setComments","card","unpdateCardTC","ModalAddCards","answer","setAnswer","cardsPack_id","addCardsTC","SearchCards","setCardAnswer","setCardQuestion","placeholder","getCardsSearch","CardsContainer","idS","history","useHistory","Cards","showAddCardModal","setshowAddCardModal","deleteCardHandler1","updateH","addCardHandler","c","shots","Card","findCardToLearn","randomC","setrandomC","getRandomCard","randomCard","sum","reduce","acc","rand","random","newSum","getCard","randomId","CardContent","setGrade","showAnswer","onClickAnswwrButton","onValueChange","onSubmit","gradeto","Number","card_id","preventDefault","setGradeTC","Routes","exact","path","render","App","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","copystate","newState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b791f904.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rowBtn\":\"Modals_rowBtn__3AXVe\",\"closeBtn\":\"Modals_closeBtn__2jH1X\",\"divBackgroundTransparent\":\"Modals_divBackgroundTransparent__m_FnY\",\"divModal\":\"Modals_divModal__tSz9-\",\"setNameInput\":\"Modals_setNameInput__2p0cC\"};","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\n\r\nconst Header = () => {\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.name)\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    return (\r\n        <nav className={s.nav}>\r\n            {isLoggedIn ? <div className={s.item}>\r\n                    {<NavLink to='/Profile' activeClassName={s.active}>{name}</NavLink>}\r\n                </div> :\r\n                <div className={s.item}>\r\n                    {<NavLink to='/Login' activeClassName={s.active}>Login</NavLink>}\r\n                </div>}\r\n\r\n            <div className={s.item}>\r\n                <NavLink to='/Registration' activeClassName={s.active}>Registration</NavLink>\r\n            </div>\r\n            {!isLoggedIn ? <div className={s.item}>\r\n                    <NavLink to='/forgot-password' activeClassName={s.active}>Forgot Password</NavLink>\r\n                </div> :\r\n                <div className={s.item}>\r\n                    <NavLink to='/new-password' activeClassName={s.active}>New Password</NavLink>\r\n                </div>}\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to='/forgot-password' activeClassName={s.active}>Forgot Password</NavLink>*/}\r\n            {/*</div>*/}\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to='/new-password' activeClassName={s.active}>New Password</NavLink>*/}\r\n            {/*</div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to='/Profile' activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/packs' activeClassName={s.active}>Packs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/cards' activeClassName={s.active}>Cards</NavLink>\r\n            </div>\r\n\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {MouseEvent} from 'react';\r\nimport './Button.css';\r\n\r\nexport interface ButtonProps {\r\n    /**\r\n     * Is this the principal call to action on the page?\r\n     */\r\n    primary?: boolean;\r\n    /**\r\n     * What background color to use\r\n     */\r\n    backgroundColor?: string;\r\n    /**\r\n     * How large should the button be?\r\n     */\r\n    size?: 'small' | 'medium' | 'large';\r\n    /**\r\n     * Button contents\r\n     */\r\n    label: string;\r\n    /**\r\n     * Optional click handler\r\n     */\r\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => void;\r\n\r\n    onBlur?: () => void\r\n\r\n    disabled?: boolean\r\n\r\n    id?: string\r\n}\r\n\r\n/**\r\n * Primary UI component for user interaction\r\n */\r\nexport const Button: React.FC<ButtonProps> = ({\r\n                                                  id,\r\n                                                  onBlur,\r\n                                                  disabled,\r\n                                                  onClick,\r\n                                                  primary = false,\r\n                                                  size = 'medium',\r\n                                                  backgroundColor,\r\n                                                  label,\r\n                                                  ...props\r\n                                              }) => {\r\n    const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n\r\n    return (\r\n        <button\r\n            id={id}\r\n            disabled={disabled}\r\n            onBlur={onBlur}\r\n            type=\"button\"\r\n            onClick={onClick}\r\n            className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}\r\n            style={{backgroundColor}}\r\n            {...props}\r\n        >\r\n            {label}\r\n        </button>\r\n    );\r\n};","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n\r\n})\r\n// api\r\nexport const authAPI = {\r\n\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponceLoginType>('/auth/login', data)\r\n           },\r\n    logOut() {\r\n        return instance.delete<ResponceLogOutType>('/auth/me')\r\n         },\r\n    me(){\r\n        return instance.post('auth/me')\r\n    },\r\n\r\n\r\n    signUp(email: string, password: string) {\r\n        return instance.post<{ addedUser: ResponceLoginType, error?: string }>('auth/register', {email, password})\r\n    },\r\n\r\n}\r\n\r\n\r\nexport const searchAPI = {}\r\n\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n\r\n}\r\n\r\nexport type ResponceLoginType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: string; // need Data\r\n    updated: string; // need Data\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\n\r\nexport type ResponceLogOutType = {\r\n    info: string;\r\n    error: string;\r\n}\r\nexport type SignUpParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, SignUpParamsType} from \"../m3-dal/auth-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {SetAppErrorActionType} from \"./appReducer\";\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type LoadingStatusType = any\r\n\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    setError: ''\r\n}\r\n\r\nexport const registerReducer = (state:InitialStateType = initialState, action: RegistrationActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"registration/SET-IS-REGISTRATION\":\r\n            return {...state, isRegistered: action.value}\r\n        case \"registration/SET-ERROR\":\r\n            return {...state, setError: action.text}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsRegistrationAC = (value: boolean) => ({\r\n    type: 'registration/SET-IS-REGISTRATION', value\r\n} as const)\r\n\r\nexport const setErrorAC = (text: string) => ({\r\n    type: 'registration/SET-ERROR', text\r\n} as const)\r\n\r\n\r\n// thunks\r\n\r\nexport const SendRegisterTC = (email:string, password: string) => (dispatch: Dispatch<RegistrationActionsType>) => {\r\n    authAPI.signUp(email, password)\r\n        .then( (res) => {\r\n            if (res.statusText === 'succeeded')\r\n            dispatch(setIsRegistrationAC(true))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setErrorAC(err.response?.data.error))\r\n        alert('some error')\r\n        })\r\n}\r\n\r\n\r\n// types\r\n\r\ntype RegistrationActionsType =\r\n     ReturnType<typeof setIsRegistrationAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | SetAppErrorActionType\r\n\r\n// type ThunkDispatch = Dispatch<any>","import React, {useState, MouseEvent} from \"react\";\r\nimport s from './Registration.module.css'\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {SendRegisterTC} from \"../../../m2-bll/registerReducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\n\r\n\r\nconst Registration = () => {\r\n    const dispatch = useDispatch()\r\n    const ApiError = useSelector<AppRootStateType, string>(state => state.register.setError)\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorPassword, setErrorPassword] = useState<string | null>(null)\r\n\r\n    const handleSubmit = (event: MouseEvent<HTMLButtonElement>) => {\r\n        if (password === confirmPassword && password.length >= 8) {\r\n            dispatch(SendRegisterTC(email, password))\r\n        } else if (password !== confirmPassword) {\r\n            setErrorPassword(\"Passwords don't match.\")\r\n        } else if (password.length < 8 || confirmPassword.length < 8) {\r\n            setErrorPassword(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={s.background}>\r\n        <div className={s.registerBlock}>\r\n            <p> Please fill in the blank fields and press sign up </p>\r\n\r\n            <form className={s.registerForm}>\r\n                <div className={s.registerForm}>\r\n                    <label htmlFor={'email'}>Email</label>\r\n                    <div className={s.register}>\r\n                        <input className={s.registerFormInput}\r\n                               name={'email'}\r\n                               type={'email'}\r\n                               onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </div>\r\n\r\n                    <label htmlFor={'password'}>Password</label>\r\n                    <div className={s.register}>\r\n\r\n                        <input className={s.registerFormInput}\r\n                               name={'password'}\r\n                               type={'password'}\r\n                               onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n\r\n\r\n                    </div>\r\n\r\n                    <label htmlFor={'confirmPassword'}>Confirm password</label>\r\n                    <div className={s.register}>\r\n                        <input className={s.registerFormInput}\r\n                               name={'confirmPassword'}\r\n                               type={'password'}\r\n                               onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <Button\r\n                        primary={true}\r\n\r\n                        onClick={handleSubmit}\r\n                        label={'Sign Up'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n                {ApiError && <div className={s.formSummaryError}>{ApiError}</div>}\r\n                {errorPassword ? <div className={s.formSummaryError}>{errorPassword}</div> : null}\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Registration;","import axios from 'axios'\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    ...settings\r\n})\r\n\r\nexport const PasswordAPI = {\r\n    forgotPassword(email: string) {\r\n        const message = `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='https://chester7777.github.io/learning_Cards/#/new-password/$token$'> link</a></div>`\r\n        // const message = `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='http://localhost:3001/forgot-password#/new-password/$token$'> link</a></div>`\r\n        const from = \"test-front-admin <Es18.03.88@gmail.com>\"\r\n       return instance.post<ResetPasswordType>(\"auth/forgot\", {email, message, from})\r\n    },\r\n    resetPassword (password: string, resetPasswordToken: string) {\r\n      return instance.post<ResetPasswordType>(`auth/set-new-password`, {password, resetPasswordToken})\r\n    }\r\n}\r\n\r\n\r\ntype ResetPasswordType = {\r\n       info: string\r\n       error: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {PasswordAPI} from \"../m3-dal/forgot-api\";\r\n\r\n\r\ntype InitialStateType = {\r\n    info: string\r\n    error: string | null\r\n    isInitialized: boolean\r\n    forgotPassword: false\r\n    from: string\r\n    email: string\r\n    message: string\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    info: '',\r\n    error: null,\r\n    isInitialized: true,\r\n    forgotPassword: false,\r\n    from: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n    password: \"\",\r\n    resetPasswordToken: \"\"\r\n}\r\n\r\n//Reducer\r\nexport const forgotReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-FORGOT-PASSWORD\":\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                message: action.message,\r\n                from: action.from\r\n            }\r\n        case \"RESET-PASSWORD\":\r\n            return {\r\n                ...state,\r\n                password: action.password,\r\n                resetPasswordToken: action.resetPasswordToken\r\n            }\r\n        case \"RESET-PASSWORD-INFO\":\r\n            return {\r\n                ...state,\r\n                info: action.info\r\n            }\r\n        case \"SET-FORGOT-PASSWORD-ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setForgotPassword = (email: string, message: string, from: string) => ({\r\n    type: \"SET-FORGOT-PASSWORD\", email, message, from\r\n} as const);\r\nexport const resetPassword = (password: string, resetPasswordToken: string) => ({\r\n    type: \"RESET-PASSWORD\", password, resetPasswordToken\r\n} as const);\r\nexport const resetPasswordInfo = (info: any) => ({\r\n    type: \"RESET-PASSWORD-INFO\", info\r\n} as const);\r\nexport const setForgotPasswordError = (error: string | null) => ({\r\n    type: \"SET-FORGOT-PASSWORD-ERROR\", error\r\n} as const);\r\n\r\n\r\n// thunks\r\nexport const forgotPasswordTC = (email: string, message: string, from: string) => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        await PasswordAPI.forgotPassword(email)\r\n        dispatch(setForgotPassword(email, message, from))\r\n    } catch (error) {\r\n        dispatch(setForgotPasswordError(error.response.data.error))\r\n    }\r\n}\r\n\r\n\r\nexport const resetNewPassword = (password: string, resetPasswordToken: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const res = await PasswordAPI.resetPassword(password, resetPasswordToken)\r\n        if (res.data.info == \"setNewPassword success —ฅ/ᐠ.̫ .ᐟฅ—\") {\r\n            dispatch(resetPasswordInfo(res.data.info))\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch(setForgotPasswordError(error.response.data.error))\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ActionsType =\r\n    ReturnType<typeof setForgotPassword> |\r\n    ReturnType<typeof resetPassword> |\r\n    ReturnType<typeof resetPasswordInfo> |\r\n    ReturnType<typeof setForgotPasswordError>\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport {Button} from '../../common/Button/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPasswordTC, setForgotPasswordError} from \"../../../m2-bll/forgotReducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport s from \"./ForgotPassword.module.css\"\r\n\r\n\r\nconst ForgotPassword = React.memo(function ForgotPassword() {\r\n\r\n    const dispatch = useDispatch();\r\n    const message = useSelector((state: AppRootStateType) => state.forgotPassword.message);\r\n    const from = useSelector((state: AppRootStateType) => state.forgotPassword.from);\r\n    const error = useSelector((state: AppRootStateType) => state.forgotPassword.error);\r\n\r\n\r\n    const [email, setEmail] = useState<string>(\"\");\r\n\r\n\r\n    const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value && e.currentTarget.value.trim() !== \"\") {\r\n            setEmail(e.currentTarget.value);\r\n        } else {\r\n            dispatch(setForgotPasswordError(error))\r\n        }\r\n    }\r\n\r\n    const onClickBtn = useCallback(() => {\r\n        dispatch(forgotPasswordTC(email, message, from))\r\n        setEmail('')\r\n    }, [email, dispatch])\r\n\r\n    return (\r\n        <div className={s.forgotPasswordBlock}>\r\n            <div className={s.registerBlock}>\r\n                <p> Please enter your email and press \"Forgot password\" </p>\r\n                <div className={s.registerForm}>\r\n                    <label htmlFor={'email'}>Email nya-admin@nya.nya</label>\r\n                    <div className={s.register}>\r\n                        <input\r\n                            onChange={handleChange}\r\n                            className={s.registerFormInput}\r\n                            type=\"email\"\r\n                            style={{\r\n                                display: \"block\",\r\n                                marginLeft: \"auto\",\r\n                                marginRight: 'auto',\r\n                                marginBottom: \"5px\",\r\n                                marginTop: \"5px\"\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <Button primary={true} onClick={onClickBtn} size={'small'} label={\"Forgot Password\"}/>\r\n                </div>\r\n                <div className={s.errorText}>{error}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default ForgotPassword;","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType, ResponceLoginType} from \"../m3-dal/auth-api\";\r\nimport {setIsLoggedInAC} from \"./loginReducer\";\r\nimport {setIsInitializedAC} from \"./appReducer\";\r\n\r\ntype profileStateType={\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar: string,\r\n    publicCardPacksCount: number,// количество колод\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean, // подтвердил ли почту\r\n    rememberMe: boolean,\r\n    error: string\r\n}\r\nconst initialState:profileStateType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0,// количество колод\r\n    created: '',\r\n    updated: '',\r\n    isAdmin: false,\r\n    verified: false, // подтвердил ли почту\r\n    rememberMe: false,\r\n    error: ''\r\n}\r\n// type stateType=ReturnType<typeof initialState>\r\n\r\ntype ActionsType = ReturnType<typeof setProfileDataAC>\r\n    |ReturnType<typeof logOutAC>\r\n|ReturnType<typeof setLoginErrorAC>\r\n\r\nexport const profileReducer = (state: any = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'login/SET-PROFILE-DATA': {\r\n            return {\r\n                ...state,_id: action.data._id,\r\n                email: action.data.email,\r\n                name: action.data.name,\r\n                avatar: action.data.avatar,\r\n                publicCardPacksCount: action.data.publicCardPacksCount,\r\n                created: action.data.created,\r\n                updated: action.data.updated,\r\n                isAdmin: action.data.isAdmin,\r\n                verified: action.data.verified, // подтвердил ли почту\r\n                rememberMe: action.data.rememberMe,\r\n                error: action.data.error\r\n                            }\r\n\r\n\r\n        }\r\n        case \"logOut\":\r\n            let newState={}\r\n            return newState\r\n        case \"login/SET-ERROR\":\r\n            return {...state,error:action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setProfileDataAC = (data: ResponceLoginType) => ({type: 'login/SET-PROFILE-DATA', data} as const)\r\nexport const setLoginErrorAC = (error:string) => ({type: 'login/SET-ERROR', error} as const)\r\nexport const logOutAC=()=>({type:'logOut'}as const)\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/auth-api\";\r\nimport {setProfileDataAC} from \"./profileReducer\";\r\nimport {setIsLoggedInAC} from \"./loginReducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {\r\n                ...state, isInitialized: action.status\r\n            }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (status: boolean) => ({type: 'APP/SET-INITIALIZED', status} as const)\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.statusText === 'OK') {\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setProfileDataAC(res.data))\r\n            dispatch(setIsLoggedInAC(true))\r\n        }\r\n    } catch (e) {\r\n        dispatch(setIsInitializedAC(true))\r\n\r\n        const error = e.response\r\n\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n\r\n        console.log('Error: ', {...e})\r\n    }\r\n\r\n}\r\n\r\n\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","import {Dispatch} from \"redux\"\r\nimport {authAPI, LoginParamsType} from \"../m3-dal/auth-api\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType, setIsInitializedAC, setIsInitializedACType} from \"./appReducer\";\r\nimport {setLoginErrorAC, setProfileDataAC} from \"./profileReducer\";\r\n\r\n// types\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setProfileDataAC> | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType |\r\n    ReturnType<typeof setLoginErrorAC>\r\n\r\nexport type RequestStatusType = any\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n\r\n}\r\n\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = ({email, password, rememberMe}: LoginParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsInitializedAC(false))\r\n    try {\r\n        const res = await authAPI.login({email, password, rememberMe})\r\n\r\n        if (res.statusText === 'OK')\r\n            dispatch(setIsInitializedAC(true))\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setProfileDataAC(res.data))\r\n\r\n    } catch (e) {\r\n        dispatch(setIsInitializedAC(true))\r\n\r\n        const error = e.response\r\n            ? dispatch(setLoginErrorAC(e.response.data.error))\r\n            : (e.message + ', more details in the console');\r\n        console.log('Error: ', {...e})\r\n    }\r\n}\r\nexport const logoutTC = () => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        if (res.statusText === \"OK\") {\r\n            dispatch(setIsLoggedInAC(false))\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport s from './Profile.module.css'\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {logoutTC} from \"../../../m2-bll/loginReducer\";\r\nimport {logOutAC} from \"../../../m2-bll/profileReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nconst Profile =React.memo(function (){\r\n    const dispatch = useDispatch()\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.name)\r\n    const ava = useSelector<AppRootStateType, string>(state => state.profile.avatar)\r\n    const email = useSelector<AppRootStateType, string>(state => state.profile.email)\r\n    const created = useSelector<AppRootStateType, string>(state => state.profile.created)\r\n    const id = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n    const publicCardPacksCount = useSelector<AppRootStateType, string>(state => state.profile.publicCardPacksCount)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    function logOutHandler() {\r\n        dispatch(logoutTC())\r\n        dispatch(logOutAC())\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to='/login'/>\r\n\r\n    }\r\n    return (\r\n        <div className={s.background}>\r\n            <div className={s.wrapProfile}>\r\n                <div className={s.wrapAva} style={{backgroundImage: `url(${ava})`}}></div>\r\n                <div className={s.wrapInfo}>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>Name:</div>\r\n                        <div className={s.info}>{name}</div>\r\n                    </div>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>Email:</div>\r\n                        <div className={s.info}>{email}</div>\r\n                    </div>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>Registration date:</div>\r\n                        <div className={s.info}>{created}</div>\r\n                    </div>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>Card Packs:</div>\r\n                        <div className={s.info}>{publicCardPacksCount}</div>\r\n                    </div>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>userID:</div>\r\n                        <div className={s.info}>{id}</div>\r\n                    </div>\r\n                    <Button primary={true} onClick={logOutHandler} label={\"LogOut\"}/>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n})\r\n\r\nexport default Profile;\r\n\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"../login/Login.module.css\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {loginTC} from \"../../../m2-bll/loginReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginParamsType} from \"../../../m3-dal/auth-api\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport Profile from \"../profile/Profile\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport {minMaxLength, validEmail} from \"../../common/validators.ts\";\r\nimport {resetPasswordInfo, setForgotPasswordError} from \"../../../m2-bll/forgotReducer\";\r\n\r\ntype  LoginContentPropsType = {\r\n\r\n    onClickHandler: ({email, password, rememberMe}: LoginParamsType) => void\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = ({email, password, rememberMe}: LoginParamsType) => {\r\n        dispatch(loginTC({email, password, rememberMe}))\r\n    }\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/Profile'}/>\r\n    }\r\n\r\n    return <LoginContent onClickHandler={onClickHandler}/>\r\n\r\n\r\n}\r\n\r\nconst LoginContent: React.FC<LoginContentPropsType> = ({\r\n                                                           onClickHandler\r\n\r\n                                                       }) => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [rememberMe, setRememberMe] = useState(false)\r\n    const [emailError, setEmailError] = useState('')\r\n    const [passwordError, setPasswordError] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    const info = useSelector<AppRootStateType, string>(state => state.forgotPassword.info)\r\n    const error = useSelector<AppRootStateType, string>(state => state.profile.error)\r\n\r\n\r\n\r\n\r\n    const onchangeEmailHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value && validEmail(e.currentTarget.value)) {\r\n            setEmail(e.currentTarget.value)\r\n            setEmailError('')\r\n\r\n        } else {\r\n            setEmailError('Email not valid!')\r\n            setEmail(e.currentTarget.value)\r\n\r\n        }\r\n    }\r\n    const onchangePasswordHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value && minMaxLength(e.currentTarget.value, 5)) {\r\n            setPassword(e.currentTarget.value)\r\n            setPasswordError('')\r\n\r\n        } else {\r\n            setPasswordError('password not valid!')\r\n            setPassword(e.currentTarget.value)\r\n\r\n        }\r\n    }\r\n\r\n    const onClickLoginButton = () => {\r\n        onClickHandler({email, password, rememberMe})\r\n    }\r\n\r\n    //отобразить сообщение при успешной смене пароля\r\n    if (info === \"setNewPassword success —ฅ/ᐠ.̫ .ᐟฅ—\") {\r\n        dispatch(resetPasswordInfo(info))\r\n    } else {\r\n        dispatch(setForgotPasswordError(error))\r\n    }\r\n\r\n    return (\r\n        <div className={s.background}>\r\n            <div className={s.registerBlock}>\r\n                <p> Please fill in the blank fields and press Login </p>\r\n\r\n                <form className={s.registerForm}>\r\n\r\n                    <label htmlFor={'email'}>Email nya-admin@nya.nya</label>\r\n                    <div className={s.register}>\r\n                        <input\r\n                            className={s.registerFormInput}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={email}\r\n                            onChange={onchangeEmailHandler}/>\r\n                    </div>\r\n\r\n                    <div className={s.errorText}>{emailError}</div>\r\n\r\n                    <label htmlFor={'password'}>Password 1qazxcvBG</label>\r\n                    <div className={s.register}>\r\n                        <input\r\n                            className={s.registerFormInput}\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={onchangePasswordHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={s.errorText}>{passwordError}</div>\r\n                    <label htmlFor={'checkbox'}> <span className={s.check}>Remember Me</span></label>\r\n                    <input\r\n                        className={s.inputcheck}\r\n                        type={\"checkbox\"}\r\n                        name=\"rememberMe\"\r\n                        checked={rememberMe}\r\n                        onChange={(e) => setRememberMe(!rememberMe)}\r\n                    />\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={onClickLoginButton}\r\n                        label={'Login'}\r\n                    />\r\n                    <div className={s.errorText}><p>{error}</p></div>\r\n                    {/*отобразить сообщение при успешной смене пароля*/}\r\n                    <div className={s.errorText}><p>{info}</p></div>\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","export function minMaxLength(text, minLength, maxLength) {\r\n    let result = !text || text.length < minLength;\r\n    if(maxLength)\r\n        result = result || text.length < minLength;\r\n    return !result;\r\n}\r\n\r\nexport function validEmail(text) {\r\n    const regex = RegExp(\r\n        /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n    );\r\n\r\n    return regex.test(text)===true;\r\n}","import axios from 'axios'\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n    // baseURL: \"http://localhost:7542/2.0/\",\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    ...settings\r\n})\r\n\r\nexport const PacksAPI = {\r\n    getPacks(page: number, userID: string) {\r\n        return instance.get<GetCardPackResponseType>(`cards/pack?pageCount=&page=${page}&user_id=${userID}`)\r\n    },\r\n    getSearchPacks(packName: string, min: number, max: number, page: number,) {\r\n        return instance.get<GetCardPackResponseType>(`cards/pack?pageCount=1000000&packName=${packName}&min=${min}&max=${max}&page=${page}`)\r\n        // return instance.get<GetSearchPacksType>(`cards/pack?pageCount=10`, {params: {packName, min, max}} )\r\n    },\r\n    getSortPacks (page: number, id: string, sortPacks: string) {\r\n        return instance.get(`cards/pack?pageCount=&page=${page}&cardsPack_id=${id}&sortPacks=${sortPacks}`)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n    },\r\n    postPack(objcardsPack: cardsPackTypeobj<cardPackPostType>) {\r\n        return instance.post('/cards/pack', objcardsPack)\r\n    },\r\n    updatePack(objUpdatePack: cardsPackTypeobj<updatePackType>) {\r\n        return instance.put('/cards/pack', objUpdatePack)\r\n    }\r\n\r\n    // resetPassword (password: string, resetPasswordToken: string) {\r\n    //   return instance.post<ResetPasswordType>(`auth/set-new-password`, {password, resetPasswordToken})\r\n    // }\r\n}\r\n\r\nexport type GetSeurchPacksType = {\r\n    params: {\r\n        packName: string\r\n        min: number\r\n        max: number\r\n    }\r\n}\r\nexport type updatePackType = {\r\n    _id: string\r\n    name?: string // не обязательно\r\n}\r\nexport type GetCardPackResponseType = {\r\n    cardPacks: Array<CardPackType>\r\n    page: number\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    pageCount: number\r\n    name?: string\r\n}\r\nexport type cardsPackTypeobj<D> = {\r\n    cardsPack: D\r\n};\r\n\r\nexport  type CardPackType = {\r\n    \"_id\": string\r\n    \"user_id\": string\r\n    \"user_name\": string\r\n    \"private\": boolean\r\n    \"name\": string\r\n    \"path\": string\r\n    \"grade\": number\r\n    \"shots\": number\r\n    \"cardsCount\": number\r\n    \"type\": string\r\n    \"rating\": number\r\n    \"created\": string\r\n    \"updated\": string\r\n    \"more_id\": string\r\n    \"__v\": number\r\n}\r\n\r\nexport type cardPackPostType = {\r\n\r\n    name?: string // если не отправить будет таким\r\n    path?: string     //\"/def\" // если не отправить будет такой\r\n    grade?: number // не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    deckCover?: string     // \"url or base64\" // не обязателен\r\n    private?: boolean // fals если не отправить будет такой\r\n    type?: string      ////\"pack\" // если не отправить будет таким\r\n}","import {Dispatch} from \"redux\";\r\nimport {cardPackPostType, cardsPackTypeobj, PacksAPI, updatePackType} from \"../m3-dal/packs-api\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\n// type InitialStateType = {\r\n//     cardPacks: any\r\n//     newPackTitle: null | string\r\n//     id: string\r\n//     cardPacksTotalCount: number\r\n//     pageCount?: number\r\n//     page?: number\r\n//     portionSize: number\r\n//     searchStatus: 'allPacks' | 'myPacks'\r\n// }\r\n\r\n// const initialState = {\r\n//     cardPacks: [],\r\n//     newPackTitle: null,\r\n//     id: '',\r\n//     cardPacksTotalCount: 140,\r\n//     pageCount: 10,\r\n//     page: 1,\r\n//     portionSize: 5,\r\n//     searchStatus: 'allPacks',\r\n//     error: \"Packs not found!!!\"\r\n// }\r\nconst initialState = {\r\n    cardPacks: [],\r\n    cardPacksTotalCount: 140, // количество колод\r\n    maxCardsCount: null,\r\n    minCardsCount: null,\r\n    id: '',\r\n    page: 1, // выбранная страница\r\n    pageCount: 5, // количество элементов на странице\r\n    portionSize: 5,\r\n    error: \"Packs not found!!!\",\r\n    packName: \"\",\r\n    sortPacks: \"\"\r\n\r\n}\r\n\r\nexport const packReducer = (state = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"PACKS/SET-PACKS\":\r\n            return {...state, cardPacks: action.cardPacks}\r\n        case \"PACKS/SET-PACKSINFO\":\r\n            return {...state, ...action.packsInfo}\r\n        case \"PACKS/SET-PACKS-ERROR\":\r\n            return {...state, error: state.error}\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {...state, page: action.page}\r\n        case \"SET_TOTAL_COUNT\":\r\n            return {...state, cardPacksTotalCount: action.cardPacksTotalCount}\r\n        case \"PACKS/SET-SORT-PACKS\":\r\n            return {...state, sortPacks: action.sortPacks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setPacks = (cardPacks: Array<any>) => ({type: \"PACKS/SET-PACKS\", cardPacks} as const);\r\n// export const setPacks = (params: GetCardPackResponseType) => ({type: \"PACKS/SET-PACKS\", params} as const);\r\nexport const setPacksInfo = (packsInfo: any) => ({type: \"PACKS/SET-PACKSINFO\", packsInfo} as const);\r\nexport const setPacksError = (error: string) => ({type: \"PACKS/SET-PACKS-ERROR\", error} as const);\r\nexport const setSortPacks = (sortPacks: string) => ({type: \"PACKS/SET-SORT-PACKS\", sortPacks} as const)\r\n\r\n//action search\r\n// export const setPacksSearchName = (packName: any) => ({type: \"PACKS/SET-PACKSNAME-SEARCH\", packName} as const);\r\n// export const setPacksSearch = (cardPacks: Array<any>) => ({type: \"PACKS/SET-PACKS-SEARCH\", cardPacks} as const);\r\n\r\n//actions Paginator\r\nexport const setCurrentPageAC = (page: number) => ({type: \"SET_CURRENT_PAGE\", page} as const)\r\nexport const setCardPacksTotalCountAC = (cardPacksTotalCount: number) => ({\r\n    type: \"SET_TOTAL_COUNT\", cardPacksTotalCount\r\n} as const)\r\n\r\n\r\n// thunks\r\nexport const getPacksTC = (pageN: number = 1, userID: string) => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    try {\r\n        let res\r\n        const packName = getState().search.packName, min = getState().search.min, max = getState().search.max\r\n        if (packName) {\r\n            res = await PacksAPI.getSearchPacks(packName, min, max, pageN)\r\n        } else {\r\n            res = await PacksAPI.getPacks(pageN, userID)\r\n        }\r\n        if (res.statusText === \"OK\")\r\n            dispatch(setPacks(res.data.cardPacks))\r\n        const {\r\n            cardPacksTotalCount,\r\n            maxCardsCount,\r\n            minCardsCount,\r\n            page,\r\n            pageCount\r\n        } = res.data\r\n        const action = {\r\n            cardPacksTotalCount,\r\n            maxCardsCount,\r\n            minCardsCount,\r\n            page,\r\n            pageCount\r\n        }\r\n        dispatch(setPacksInfo(action))\r\n        dispatch(setCardPacksTotalCountAC(action.cardPacksTotalCount))\r\n        dispatch(setCurrentPageAC(action.page))\r\n    } catch (error) {\r\n        console.log('error fetching packs!!!', error)\r\n        dispatch(setPacksError(error))\r\n    }\r\n}\r\nexport const getPacksSearchNameTC = (packName: string, min: number, max: number) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const res = await PacksAPI.getSearchPacks(packName, min, max, 1)\r\n        dispatch(setPacks(res.data.cardPacks))\r\n    } catch (error) {\r\n        console.log('error fetching packs!!!', error)\r\n        dispatch(setPacksError(error))\r\n    }\r\n}\r\n\r\nexport const getSortPacksTC = (page: number, id: string, sortPacks: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setSortPacks(sortPacks))\r\n    try {\r\n        let res = await PacksAPI.getSortPacks(page, id, sortPacks)\r\n        dispatch(setPacks(res.data.cardPacks))\r\n    } catch (error) {\r\n        console.log('error sort packs!!!', error.info)\r\n        dispatch(setPacksError(error))\r\n    }\r\n}\r\n\r\nexport const deletePackTC = (id: string) => async (dispatch: any, getState: any) => {\r\n    const _id = getState().profile._id\r\n    const page = getState().packs.page\r\n    try {\r\n        const res = await PacksAPI.deletePack(id)\r\n        if (res.statusText === \"OK\") {\r\n            dispatch(getPacksTC(page, _id))\r\n        }\r\n    } catch (error) {\r\n        console.log('error fetching packs!!!', error)\r\n    }\r\n}\r\n\r\nexport const addPackTC = (newcard: cardsPackTypeobj<cardPackPostType>) => async (dispatch: any, getState: any) => {\r\n    const _id = getState().profile._id\r\n    const page = getState().packs.page\r\n    try {\r\n        const res = await PacksAPI.postPack(newcard)\r\n        if (res.statusText === \"Created\") {\r\n            dispatch(getPacksTC(page, _id))\r\n        }\r\n    } catch (e) {\r\n        console.log('error adding packs!!!', e)\r\n    }\r\n}\r\n\r\nexport const unpdatePackTC = (objUpdatePack: cardsPackTypeobj<updatePackType>) => async (dispatch: any, getState: any) => {\r\n    const _id = getState().profile._id\r\n    const page = getState().packs.page\r\n    try {\r\n        const res = await PacksAPI.updatePack(objUpdatePack)\r\n        if (res.statusText === \"OK\") {\r\n            dispatch(getPacksTC(page, _id))\r\n        }\r\n    } catch (e) {\r\n        console.log('error adding packs!!!', e)\r\n\r\n    }\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setPacks> |\r\n    ReturnType<typeof setPacksError> |\r\n    ReturnType<typeof setPacksInfo> |\r\n    ReturnType<typeof setCurrentPageAC> |\r\n    ReturnType<typeof setSortPacks> |\r\n    // ReturnType<typeof setPacksSearch> |\r\n    // ReturnType<typeof setPacksSearchName> |\r\n    ReturnType<typeof setCardPacksTotalCountAC>;\r\n\r\n\r\n","import {Slider} from \"antd\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport s from './searchPack.module.css';\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getPacksSearchNameTC, setPacksError} from \"../../../m2-bll/packReducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\n\r\n\r\nexport let SearchPack = React.memo(() => {\r\n\r\n        const dispatch = useDispatch();\r\n        const cardPacks = useSelector((state: AppRootStateType) => state.packs.cardPacks);\r\n        const error = useSelector((state: AppRootStateType) => state.packs.error);\r\n\r\n        const [packName, setPackName] = useState<string>(\"\");\r\n        const [min, setMin] = useState<number>(0);\r\n        const [max, setMax] = useState<number>(10);\r\n\r\n        const setPackNameSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setPackName(e.currentTarget.value)\r\n        }\r\n\r\n        const setMinMaxValue = (arr: number[]) => {\r\n            let min = arr[0]\r\n            let max = arr[1]\r\n            if (min > 0) {\r\n                setMin(min)\r\n            }\r\n            if (max < 100) {\r\n                setMax(max)\r\n            }\r\n        }\r\n\r\n        //отправка запросов и поиск по первым буквам до нажатия кнопки поиска\r\n        // useEffect(() => {\r\n        //     setTimeout(() => {\r\n        //         dispatch(getPacksSearchNameTC(packName, min, max))\r\n        //     }, 2000)\r\n        // }, [packName, min, max])\r\n\r\n        const getPacksCallback = () => {\r\n            if (!!cardPacks.length) {\r\n                dispatch(getPacksSearchNameTC(packName, min, max))\r\n            } else {\r\n                dispatch(setPacksError(error))\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={s.searchPack}>\r\n                <div>\r\n                    <input\r\n                        type=\"text\"\r\n                        name={\"search\"}\r\n                        onChange={setPackNameSearch}\r\n                    />\r\n                </div>\r\n                <Button\r\n                    primary={true}\r\n                    onClick={getPacksCallback}\r\n                    label={'Search'}\r\n                    backgroundColor={'blue'}\r\n                />\r\n                <div className={s.search_table}>\r\n                    <Slider\r\n                        onChange={setMinMaxValue}\r\n                        className={s.slider}\r\n                        range={{draggableTrack: true}}\r\n                        defaultValue={[0, 10]}/>\r\n                </div>\r\n                <div style={{fontSize: \"50px\", color: \"red\"}}>{cardPacks.length === 0 && error}</div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n","export default __webpack_public_path__ + \"static/media/__Iphone-spinner-1.4c0dabf6.gif\";","import React from \"react\";\r\nimport spiner from '../Loader/__Iphone-spinner-1.gif'\r\nimport s from '../Loader/loading.module.css'\r\nconst  Loading = () => {\r\n    return (\r\n        <div>\r\n                     <div className={s.loadingStyle}><img src={spiner} alt=\"Be patient...\"/></div>\r\n        </div>\r\n\r\n);\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\nimport s from \"./Modals.module.css\";\r\n\r\ntype ModalType = {\r\n    enableBackground?: boolean;\r\n    backgroundOnClick?: () => void;\r\n    modalOnClick?: () => void;\r\n    show: boolean\r\n}\r\n\r\nconst Modal: React.FC<ModalType> = (\r\n    {\r\n        enableBackground,\r\n        backgroundOnClick = () => {},\r\n        modalOnClick = () => {},\r\n        show,\r\n        children,\r\n    }\r\n) => {\r\n\r\n    if (!show) return null;\r\n\r\n    return (\r\n        <>\r\n            {enableBackground && <div\r\n                className={s.divBackgroundTransparent}\r\n                onClick={backgroundOnClick}\r\n            />}\r\n            <div\r\n                className={s.divModal}\r\n                onClick={modalOnClick}\r\n            >\r\n                {children}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Modal;","import React, {CSSProperties, ReactNode, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport s from \"./Modals.module.css\"\r\nimport {deletePackTC} from '../../../m2-bll/packReducer';\r\nimport Modal from './Modal';\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\ntype ModalDeleteType = {\r\n    close: () => void;\r\n    button?: ReactNode;\r\n    enableBackground?: boolean;\r\n    backgroundStyle?: CSSProperties;\r\n    backgroundOnClick?: () => void;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n    _id: string\r\n    show: boolean;\r\n}\r\n\r\nconst ModalDelete: React.FC<ModalDeleteType> = (\r\n    {\r\n        button = 'delete',\r\n        enableBackground,\r\n        backgroundStyle,\r\n        backgroundOnClick = () => {},\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        close,\r\n        _id,\r\n        show\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [saveInputs, setSaveInputs] = useState({\r\n        f: () => {}\r\n    });\r\n\r\n    const deletePack = () => {\r\n        dispatch(deletePackTC(_id))\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            enableBackground={enableBackground}\r\n            backgroundOnClick={() => {\r\n                backgroundOnClick()\r\n            }}\r\n            modalOnClick={modalOnClick}\r\n            show={true}\r\n        >\r\n            <div className={s.closeBtn}>\r\n                <button onClick={() => close()}>x</button>\r\n            </div>\r\n\r\n            <div>\r\n                {\"Are you sure, you want to remove the pack?\"}\r\n            </div>\r\n            <div className={s.rowBtn}>\r\n                <div>\r\n                    <Button\r\n                        onClick={() => close()}\r\n                        label={'cancel'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        onClick={() => deletePack()}\r\n                        label={'delete'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModalDelete;","import React, {CSSProperties, ReactNode, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport s from \"./Modals.module.css\"\r\nimport {unpdatePackTC} from '../../../m2-bll/packReducer';\r\nimport Modal from './Modal';\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {cardsPackTypeobj, updatePackType} from '../../../m3-dal/packs-api';\r\n\r\ntype ModalUpdateType = {\r\n    close: () => void;\r\n    button?: ReactNode;\r\n    enableBackground?: boolean;\r\n    backgroundStyle?: CSSProperties;\r\n    backgroundOnClick?: () => void;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n    _id: string\r\n    show: boolean;\r\n}\r\n\r\nconst ModalUpdate: React.FC<ModalUpdateType> = (\r\n    {\r\n        button = 'save',\r\n        enableBackground,\r\n        backgroundStyle,\r\n        backgroundOnClick = () => {},\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        show,\r\n        close,\r\n        _id\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [saveInputs, setSaveInputs] = useState({\r\n        f: () => {}\r\n    });\r\n\r\n    const successCloseModal = () => {\r\n        const objUpdatePack: cardsPackTypeobj<updatePackType> = {cardsPack: {_id: _id, name: newName}}\r\n        dispatch(unpdatePackTC(objUpdatePack))\r\n        setNewName('')\r\n\r\n        saveInputs.f();\r\n        setNewName(newName || '');\r\n        setSaveInputs({\r\n            f: () => {}\r\n        }); // unsubscribe\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            enableBackground={enableBackground}\r\n            backgroundOnClick={() => {\r\n                setNewName(newName);\r\n                backgroundOnClick()\r\n            }}\r\n            modalOnClick={modalOnClick}\r\n            show={true}\r\n        >\r\n            <div className={s.closeBtn}>\r\n                <button onClick={()=> close()}>x</button>\r\n            </div>\r\n            {\"update name pack\"}\r\n            <div>\r\n                <input className={s.setNameInput}\r\n                       name={'name'}\r\n                       type={'text'}\r\n                       value={newName}\r\n                       onChange={e => setNewName(e.currentTarget.value)}\r\n                />\r\n            </div>\r\n            <div className={s.rowBtn}>\r\n                <div>\r\n                    <Button\r\n                        onClick={() => close()}\r\n                        label={'cancel'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        onClick={successCloseModal}\r\n                        label={'save'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModalUpdate;","import React, {CSSProperties, ReactNode, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport s from \"./Modals.module.css\"\r\nimport {cardPackPostType, cardsPackTypeobj} from '../../../m3-dal/packs-api';\r\nimport {addPackTC} from '../../../m2-bll/packReducer';\r\nimport Modal from './Modal';\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\ntype ModalAddPackType = {\r\n    show: boolean;\r\n    close: () => void;\r\n    button?: ReactNode;\r\n    enableBackground?: boolean;\r\n    backgroundStyle?: CSSProperties;\r\n    backgroundOnClick?: () => void;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n}\r\n\r\nconst ModalAddPack: React.FC<ModalAddPackType> = (\r\n    {\r\n        button = 'save',\r\n        enableBackground,\r\n        backgroundStyle,\r\n        backgroundOnClick = () => {},\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        show,\r\n        close,\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n    const [newName, setNewName] = useState(\"\");\r\n    const [saveInputs, setSaveInputs] = useState({\r\n        f: () => {}\r\n    });\r\n\r\n    const successCloseModal = () => {\r\n        const newcard: cardsPackTypeobj<cardPackPostType> = {cardsPack: {name: newName}}\r\n        dispatch(addPackTC(newcard))\r\n        setNewName('')\r\n\r\n        saveInputs.f();\r\n        setNewName(newName || '');\r\n        setSaveInputs({\r\n            f: () => {}\r\n        }); // unsubscribe\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            enableBackground={enableBackground}\r\n            backgroundOnClick={() => {\r\n                setNewName(newName);\r\n                backgroundOnClick()\r\n            }}\r\n            modalOnClick={modalOnClick}\r\n            show={show}\r\n        >\r\n            <div className={s.closeBtn}>\r\n                <button onClick={()=> close()}>x</button>\r\n            </div>\r\n            {\"Creat new pack\"}\r\n            <div>\r\n                <input className={s.setNameInput}\r\n                       name={'name'}\r\n                       type={'name'}\r\n                       value={newName}\r\n                       onChange={e => setNewName(e.currentTarget.value)}\r\n                />\r\n            </div>\r\n            <div className={s.rowBtn}>\r\n                <div>\r\n                    <Button\r\n                        onClick={() => close()}\r\n                        label={'cancel'}\r\n                    backgroundColor={'blue'}/>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        onClick={successCloseModal}\r\n                        label={'save'}\r\n                    backgroundColor={'blue'}/>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModalAddPack;","import React, {useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport s from \"./Paginator.module.css\"\r\nimport cn from \"classnames\";\r\nimport {getPacksTC} from \"../../../m2-bll/packReducer\";\r\n\r\n// type PaginatorType = {\r\n//     page: number\r\n//     totalItemsCount: number\r\n//     pageCount: number\r\n//     portionSize: number\r\n//     onPageChanged: () => void\r\n//     cardPacksTotalCount: number\r\n//    \r\n// }\r\n\r\n\r\nexport let Paginator = () => {\r\n    const portionSize = useSelector<AppRootStateType, number>(state => state.packs.portionSize);\r\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount);\r\n    const currentPage = useSelector<AppRootStateType, number>(state => state.packs.page);\r\n    const myId = useSelector<AppRootStateType, string>(state => state.packs.id);\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    let pagesCount = Math.ceil(cardPacksTotalCount / 10);\r\n    let pages = [];\r\n\r\n    const onPageChanged = (currentPage: number) => {\r\n        dispatch(getPacksTC(currentPage, myId))\r\n    }\r\n\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState<number>(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>\r\n            }\r\n            {\r\n                pages\r\n                    .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                    .map((p) => {\r\n                        return <span\r\n                            className={cn({[s.selectedPage]: currentPage === p}, s.pageNumber)}\r\n                            key={p}\r\n                            onClick={(e) => {\r\n                                onPageChanged(p)\r\n                            }}>{p}</span>\r\n                    })\r\n            }\r\n            {\r\n                portionCount > portionNumber &&\r\n                <button onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}>FOLL</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n","import axios from 'axios'\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    ...settings\r\n})\r\nexport const CardsAPI = {\r\n    getCards(page: number, cardsPackID: string) {\r\n        return instance.get<GetCardResponseType>(`cards/card?pageCount=&page=${page}&cardsPack_id=${cardsPackID}`)\r\n    },\r\n    getSearchCards(cardAnswer: string, cardQuestion: string, min: number, max: number, page: number, cardsPackID: string | null) {\r\n\r\n        return instance.get<GetCardResponseType>(\r\n            `cards/card?pageCount=&cardAnswer=${cardAnswer}&cardQuestion=${cardQuestion}&min=${min}&max=${max}&page=${page}&cardsPack_id=${cardsPackID}`\r\n        )\r\n        // return instance.get<GetSearchPacksType>(`cards/pack?pageCount=10`, {params: {packName, min, max}} )\r\n    },\r\n    deleteCards(id: string) {\r\n        return instance.delete(`/cards/card?id=${id}`)\r\n    },\r\n    postCards(objcards: cardsTypeobj<cardsPostType>) {\r\n        return instance.post('/cards/card', objcards)\r\n    },\r\n    updateCards(objUpdatePack: cardsTypeobj<updateCardType>) {\r\n        return instance.put('/cards/card', objUpdatePack)\r\n    },\r\n    putGrade(grade: putGradeType) {\r\n        return instance.put<gradeRespType>('cards/grade', grade)\r\n    }\r\n\r\n    // resetPassword (password: string, resetPasswordToken: string) {\r\n    //   return instance.post<ResetPasswordType>(`auth/set-new-password`, {password, resetPasswordToken})\r\n    // }\r\n}\r\nexport type putGradeType = {\r\n    grade: number\r\n    card_id: string\r\n}\r\nexport type gradeRespType = {\r\n    updatedGrade: {\r\n        _id: string\r\n        cardsPack_id: string\r\n        card_id: string\r\n        user_id: string\r\n        grade: number\r\n        shots: number\r\n    }\r\n}\r\n\r\n\r\nexport type updateCardType = {\r\n    _id: string\r\n    question?: string // не обязательно\r\n    comments?: string // не обязателен\r\n}\r\nexport type GetCardResponseType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\n\r\nexport  type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n\r\n    answerImg: string\r\n    answerVideo: string\r\n    comments: string\r\n    more_id: string\r\n    questionImg: string\r\n    questionVideo: string\r\n\r\n}\r\n\r\n\r\nexport type cardsTypeobj<D> = {\r\n    card: D\r\n};\r\n\r\n\r\nexport type cardsPostType = {\r\n\r\n    cardsPack_id: string\r\n    question?: string // если не отправить будет таким\r\n    answer?: string // если не отправить будет таким\r\n    grade?: number // 0..5, не обязателен\r\n    shots?: number // не обязателен\r\n    rating?: number // не обязателен\r\n    answerImg?: string // не обязателен\r\n    questionImg?: string // не обязателен\r\n    questionVideo?: string // не обязателен\r\n    answerVideo?: string // не обязателен\r\n    type?: string // если не отправить будет таким\r\n}","import {Dispatch} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport {\r\n    CardsAPI,\r\n    cardsPostType,\r\n    cardsTypeobj,\r\n    putGradeType,\r\n    // CardType,\r\n    // GetCardResponseType,\r\n    updateCardType\r\n} from \"../m3-dal/cards-api\";\r\nimport {cardPackPostType, CardPackType, cardsPackTypeobj, PacksAPI, updatePackType} from \"../m3-dal/packs-api\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\n\r\nconst initialState: GetCardResponseType = {\r\n    cards: [],\r\n    cardsTotalCount: null,\r\n    maxGrade: null,\r\n    minGrade: null,\r\n    page: null,\r\n    pageCount: null,\r\n    packUserId: '',\r\n    cardToLearn: null,\r\n    currentIDpack: null,\r\n    currentIDcard: null,\r\n    cardAnswer: \"\",\r\n    cardQuestion: \"\",\r\n    error: \"Cards not found!!!\",\r\n}\r\nexport type GetCardResponseType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number | null\r\n    maxGrade: number | null\r\n    minGrade: number | null\r\n    page: null | number\r\n    pageCount: number | null\r\n    packUserId: string\r\n    cardToLearn: any\r\n    currentIDpack: string | null\r\n    currentIDcard: string | null\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    error: string\r\n}\r\n\r\n\r\nexport  type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n\r\n    answerImg: string\r\n    answerVideo: string\r\n    comments: string\r\n    more_id: string\r\n    questionImg: string\r\n    questionVideo: string\r\n\r\n}\r\n\r\nexport const cardsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"CARDS/SET-CARDS\":\r\n            return {\r\n                ...state,\r\n                cards: action.cards\r\n            }\r\n        case \"CARDS/SET-CARDSINFO\":\r\n            return {\r\n                ...state, ...action.cardsInfo\r\n            }\r\n        case \"CARDS/SET-currentIDpack\":\r\n            return {\r\n                ...state, currentIDpack: action.currentIDpack\r\n            }\r\n        case \"CARDS/SET-currentIDcard\":\r\n            return {\r\n                ...state, currentIDcard: action.currentIDcard\r\n            }\r\n        case \"CARDS/FIND-CARD-TO-LEARN\":\r\n            let copystate = {...state}\r\n            const cardToLearn = copystate.cards.filter(c => {\r\n                if (c._id === action.id) return {...c}\r\n            })\r\n            return {\r\n                ...state, cardToLearn: {...cardToLearn}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const findCardToLearn = (id: string | null) => ({type: \"CARDS/FIND-CARD-TO-LEARN\", id} as const);\r\nexport const setCards = (cards: Array<CardType>) => ({type: \"CARDS/SET-CARDS\", cards} as const);\r\nexport const setCardsInfo = (cardsInfo: any) => ({type: \"CARDS/SET-CARDSINFO\", cardsInfo} as const);\r\nexport const setcurrentIDpack = (currentIDpack: string) => ({type: \"CARDS/SET-currentIDpack\", currentIDpack} as const);\r\nexport const setcurrentIDcard = (currentIDcard: string) => ({type: \"CARDS/SET-currentIDcard\", currentIDcard} as const);\r\n\r\n//actions Paginator\r\n\r\n//actions Search\r\n\r\n\r\n// thunks\r\nexport const getCardTC = (pageN: number, packID: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const res = await CardsAPI.getCards(pageN, packID)\r\n        dispatch(setCards(res.data.cards))\r\n        const {\r\n            page, pageCount, cardsTotalCount, maxGrade, minGrade, packUserId\r\n        } = res.data\r\n        const action = {\r\n            page, pageCount, cardsTotalCount, maxGrade, minGrade, packUserId\r\n        }\r\n        dispatch(setCardsInfo(action))\r\n    } catch (error) {\r\n        console.log('error fetching packs!!!', error)\r\n    }\r\n}\r\n\r\nexport const getCardsSearch = (\r\n    cardAnswer: string,\r\n    cardQuestion: string,\r\n    min: number,\r\n    max: number,\r\n    page: number,\r\n    cardsPackID: string | null\r\n) => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    try {\r\n        let res = await CardsAPI.getSearchCards(cardAnswer, cardQuestion, min, max, page, cardsPackID)\r\n        dispatch(setCards(res.data.cards))\r\n    } catch (error) {\r\n        console.log('error search cards!!!', error.info)\r\n    }\r\n}\r\n\r\nexport const deleteCardTC = (idCard: string, idPack: string, page: number = 1) => async (dispatch: any) => {\r\n    try {\r\n        const res = await CardsAPI.deleteCards(idCard)\r\n\r\n        dispatch(getCardTC(page, idPack))\r\n\r\n    } catch (error) {\r\n\r\n        console.log('error fetching packs!!!', error)\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport const addCardsTC = (objcards: cardsTypeobj<cardsPostType>) => async (dispatch: any, getState: any) => {\r\n    const page = 1\r\n\r\n    try {\r\n        const res = await CardsAPI.postCards(objcards)\r\n        if (res.statusText === \"Created\") {\r\n            dispatch(getCardTC(page, objcards.card.cardsPack_id))\r\n        }\r\n    } catch (e) {\r\n        console.log('error adding packs!!!', e)\r\n    }\r\n}\r\n\r\nexport const setGradeTC = (grade: putGradeType) => async (dispatch: any, getState: any) => {\r\n    const page = 1\r\n    try {\r\n        const res = await CardsAPI.putGrade(grade)\r\n        // dispatch(getCardTC(page, objcards.card.cardsPack_id))\r\n    } catch (e) {\r\n        console.log('error adding packs!!!', e)\r\n    }\r\n}\r\n\r\nexport const unpdateCardTC = ({\r\n                                  id,\r\n                                  _id,\r\n                                  comments,\r\n                                  question\r\n                              }: updateCardType & { id: string }) => async (dispatch: any) => {\r\n    const page = 1\r\n    const objUpdatePack: cardsTypeobj<updateCardType> = {card: {_id, comments, question}}\r\n\r\n    try {\r\n        const res = await CardsAPI.updateCards(objUpdatePack)\r\n        dispatch(getCardTC(page, id))\r\n    } catch (e) {\r\n        console.log('error adding packs!!!', e)\r\n\r\n    }\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType =\r\n    ReturnType<typeof setCards> |\r\n    ReturnType<typeof setCardsInfo> |\r\n    ReturnType<typeof findCardToLearn> |\r\n    ReturnType<typeof setcurrentIDpack> |\r\n    ReturnType<typeof setcurrentIDcard>\r\n\r\n\r\ntype CardsInfoType = {\r\n    cardsTotalCount: number | null\r\n    maxGrade: number | null\r\n    minGrade: number | null\r\n    page: number | null\r\n    pageCount: number | null\r\n    packUserId: string\r\n}","import s from \"./SortPacks.module.css\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {getSortPacksTC} from \"../../../m2-bll/packReducer\";\r\nimport {useState} from \"react\";\r\n\r\n// type PropsType = {\r\n//     property: string\r\n// }\r\n\r\nexport const SortPacks = (props: { property: string }) => {\r\n    const dispatch = useDispatch();\r\n    const page = useSelector((state: AppRootStateType) => state.packs.page);\r\n    const id = useSelector((state: AppRootStateType) => state.packs.id);\r\n    const sortPack = useSelector((state: AppRootStateType) => state.packs.sortPacks);\r\n    const upSortPacks = `0${props.property}`\r\n    const downSortPacks = `1${props.property}`\r\n\r\n    const [up, setUp] = useState<boolean>(false)\r\n    const [down, setDown] = useState<boolean>(false)\r\n\r\n\r\n    const upCallback = () => {\r\n        setUp(true)\r\n        setDown(false)\r\n        dispatch(getSortPacksTC(page, id, upSortPacks))\r\n    }\r\n\r\n    const downCallback = () => {\r\n        setUp(false)\r\n        setDown(true)\r\n        dispatch(getSortPacksTC(page, id, downSortPacks))\r\n    }\r\n\r\n    return <div className={s.sortContainer}>\r\n        <div>\r\n            <button\r\n                className={sortPack.substr(1) === props.property && up ? s.active : \"\"}\r\n                onClick={upCallback}>\r\n                ☝\r\n            </button>\r\n        </div>\r\n        <div>\r\n            <button\r\n                className={sortPack.substr(1) === props.property && down ? s.active : \"\"}\r\n                onClick={downCallback}>\r\n                ☟\r\n            </button>\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport s from './Packs.module.css'\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {SearchPack} from \"../searchPack/SearchPack\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {getPacksTC} from \"../../../m2-bll/packReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {CardPackType} from \"../../../m3-dal/packs-api\";\r\nimport Loading from \"../../common/Loader/Loading\";\r\nimport ModalDelete from \"../modal/ModalDelete\";\r\nimport ModalUpdate from \"../modal/ModalUpdate\";\r\nimport ModalAddPack from \"../modal/ModalAddPack\";\r\nimport {Paginator} from \"../paginator_searchPack/Paginator\";\r\nimport {setcurrentIDpack} from \"../../../m2-bll/cardsReducer\";\r\nimport {SortPacks} from \"../SortComponent/SortPacks\";\r\n\r\n\r\nconst PacksContainer = () => {\r\n    ///это для того чтоб загржались свои карточки а не игната, чтоб работало раскоментировать\r\n    const userID = useSelector<AppRootStateType, string>(state => state.profile._id)\r\n\r\n    if (!userID) {\r\n        return <Loading/>\r\n    }\r\n\r\n    return (<div>\r\n            <Packs userID={userID}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype PropsType = {\r\n    userID: string\r\n}\r\n\r\nconst Packs = React.memo(({userID}: PropsType) => {\r\n        //для открытия модалки\r\n        const [show, setShow] = useState<boolean>(false);\r\n        const [showUpdateModal, setShowUpdateModal] = useState<boolean>(false);\r\n        const [update, setUpdate] = useState<string>(\"\");\r\n        const [showModalDelete, setShowModalDelete] = useState<string>(\"\");\r\n        const [showAllPack, setshowAllPacks] = useState(false);\r\n\r\n        const dispatch = useDispatch();\r\n        const cardPacks = useSelector<AppRootStateType, Array<CardPackType>>((state: AppRootStateType) => state.packs.cardPacks);\r\n        const page = useSelector((state: AppRootStateType) => state.packs.page);\r\n\r\n        useEffect(() => {\r\n            if (!showAllPack) {\r\n                dispatch(getPacksTC(page, userID))  ///для получения своих карт по своему ид\r\n\r\n            } else {\r\n                dispatch(getPacksTC(page, \"\"))\r\n            }\r\n        }, [userID, showAllPack])\r\n\r\n\r\n        const addPackTitle = () => {\r\n            //открывает модалку для добавления PACK\r\n            setShow(true)\r\n        }\r\n        const changeTitle = (_id: string) => {\r\n            //открывает модалку для обновления PACK\r\n            setShowUpdateModal(true)\r\n            setUpdate(_id)\r\n        }\r\n        const deletePack = (_id: string) => {\r\n            //открывает модалку для удаления PACK\r\n            setShowModalDelete(_id)\r\n        }\r\n        const getAllPack = () => {\r\n            setshowAllPacks(true)\r\n        }\r\n\r\n        const showCards = (_id: string) => {\r\n            dispatch(setcurrentIDpack(_id))\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {/*если show true, откроется модалка*/}\r\n                {show && <ModalAddPack\r\n                    show={show}\r\n                    close={() => setShow(false)}\r\n                    enableBackground={true}\r\n                    backgroundOnClick={() => setShow(false)}\r\n                />}\r\n                {/*если update true, откроется модалка*/}\r\n                {showUpdateModal && <ModalUpdate\r\n                    close={() => setShowUpdateModal(false)}\r\n                    enableBackground={true}\r\n                    backgroundOnClick={() => setShowUpdateModal(false)}\r\n                    _id={update}\r\n                    show={show}\r\n                />}\r\n                {/*если _id={showModalDelete} строка, откроется модалка*/}\r\n                {Boolean(showModalDelete) && <ModalDelete\r\n                    close={() => setShowModalDelete('')}\r\n                    enableBackground={true}\r\n                    backgroundOnClick={() => setShowModalDelete('')}\r\n                    _id={showModalDelete}\r\n                    show={show}\r\n                />}\r\n                <div>\r\n                    <Button onClick={addPackTitle} label={'Add Pack'}/>\r\n                </div>\r\n                <SearchPack/>\r\n                <table className={s.table}>\r\n                    <thead>\r\n                    <tr >\r\n                        <th className={s.heading}>\r\n                            Name\r\n                            <SortPacks property={\"name\"} />\r\n                        </th>\r\n                        <th className={s.heading}>\r\n                            Cards count\r\n                            <SortPacks  property={\"cardsCount\"} />\r\n                        </th>\r\n                        <th className={s.heading}>\r\n                            Created\r\n                            <SortPacks property={\"created\"} />\r\n                        </th>\r\n                        <th className={s.heading}>\r\n                            Last update\r\n                            <SortPacks property={\"updated\"}/>\r\n                        </th>\r\n                        <th>Controls <Button\r\n                            onClick={getAllPack}\r\n                            label={'Get All'}/></th>\r\n                    </tr>\r\n                    </thead>\r\n                    {cardPacks.map((p: any) => {\r\n                        return <tbody key={p._id} className={s.packData}>\r\n                        <tr>\r\n                            <td>{p.name}</td>\r\n                            <td>{p.cardsCount}</td>\r\n                            <td>{p.created}</td>\r\n                            <td>{p.updated}</td>\r\n                            <td>\r\n                                <Button\r\n                                    onClick={() => changeTitle(p._id)}\r\n                                    label={'Update'}/>\r\n                                <Button\r\n                                    onClick={() => deletePack(p._id)}\r\n                                    label={'Delete'}/>\r\n                                <NavLink to={`/cards/${p._id}`} onClick={() => showCards(p._id)}>Cards</NavLink>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    })\r\n                    }\r\n                </table>\r\n                <Paginator/>\r\n            </div>\r\n        );\r\n    }\r\n)\r\n\r\n\r\nexport default PacksContainer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport {Button} from '../../common/Button/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    forgotPasswordTC,\r\n    resetNewPassword,\r\n    resetPasswordInfo,\r\n    setForgotPasswordError\r\n} from \"../../../m2-bll/forgotReducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport s from \"./ForgotPassword.module.css\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\n\r\n\r\nconst NewPassword = function ForgotPassword() {\r\n\r\n    const dispatch = useDispatch();\r\n    const info = useSelector((state: AppRootStateType) => state.forgotPassword.info);\r\n    const error = useSelector((state: AppRootStateType) => state.forgotPassword.error);\r\n    const {token} = useParams<{ token: string }>();\r\n\r\n\r\n    const [password, setPassword] = useState<string>(\"\");\r\n\r\n\r\n    const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value && e.currentTarget.value.trim() !== \"\") {\r\n            setPassword(e.currentTarget.value);\r\n        } else {\r\n            dispatch(setForgotPasswordError(error));\r\n        }\r\n    }\r\n\r\n    const onClickBtn = () => {\r\n        dispatch(resetNewPassword(password, token))\r\n        setPassword('')\r\n    }\r\n\r\n\r\n    if (info === \"setNewPassword success —ฅ/ᐠ.̫ .ᐟฅ—\") {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.forgotPasswordBlock}>\r\n            <div className={s.registerBlock}>\r\n                <p> Please enter new password and press \"Forgot password\" </p>\r\n                <div className={s.registerForm}>\r\n                    <label htmlFor={'password'}>Password ********</label>\r\n                    <div className={s.register}>\r\n                        <input\r\n                            onChange={handleChange}\r\n                            className={s.registerFormInput}\r\n                            type=\"password\"\r\n                            style={{\r\n                                display: \"block\",\r\n                                marginLeft: \"auto\",\r\n                                marginRight: 'auto',\r\n                                marginBottom: \"5px\",\r\n                                marginTop: \"5px\"\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <Button primary={true} onClick={onClickBtn} size={'small'} label={\"Forgot Password\"}/>\r\n                </div>\r\n                <div className={s.errorText}>{error}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default NewPassword;","import React, {CSSProperties, ReactNode, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport s from \"./Modals.module.css\"\r\nimport {deletePackTC} from '../../../m2-bll/packReducer';\r\nimport Modal from './Modal';\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport { deleteCardTC } from '../../../m2-bll/cardsReducer';\r\n\r\ntype ModalDeleteType = {\r\n    close: () => void;\r\n    button?: ReactNode;\r\n    enableBackground?: boolean;\r\n    backgroundStyle?: CSSProperties;\r\n    backgroundOnClick?: () => void;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n    _id: string\r\n    show: boolean;\r\n    idCArd:string\r\n    // showModalDelete:any\r\n}\r\n\r\nconst ModalDeleteCards: React.FC<ModalDeleteType> = (\r\n    {\r\n        button = 'delete',\r\n        enableBackground,\r\n        backgroundStyle,\r\n        backgroundOnClick = () => {},\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        close,\r\n        _id,\r\n        show,\r\n        idCArd,\r\n        // showModalDelete\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    const deletePack=function  ()  {\r\n        dispatch(deleteCardTC(idCArd,_id))\r\n       // showModalDelete.call(null,arguments)\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            enableBackground={enableBackground}\r\n            backgroundOnClick={() => {\r\n                backgroundOnClick()\r\n            }}\r\n            modalOnClick={modalOnClick}\r\n            show={true}\r\n        >\r\n            <div className={s.closeBtn}>\r\n                <button onClick={() => close()}>x</button>\r\n            </div>\r\n\r\n            <div>\r\n                {\"Are you sure, you want to remove the card?\"}\r\n            </div>\r\n            <div className={s.rowBtn}>\r\n                <div>\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={() => close()}\r\n                        label={'cancel'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={() => deletePack()}\r\n                        // onClick={() => handler()}\r\n                        label={'delete'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModalDeleteCards;","import React, {CSSProperties, ReactNode, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport s from \"./Modals.module.css\"\r\nimport {unpdatePackTC} from '../../../m2-bll/packReducer';\r\nimport Modal from './Modal';\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {cardsPackTypeobj, updatePackType} from '../../../m3-dal/packs-api';\r\nimport { addCardsTC, unpdateCardTC } from '../../../m2-bll/cardsReducer';\r\nimport {cardsPostType, cardsTypeobj } from '../../../m3-dal/cards-api';\r\n\r\ntype ModalUpdateType = {\r\n    close: () => void;\r\n    button?: ReactNode;\r\n    enableBackground?: boolean;\r\n    backgroundStyle?: CSSProperties;\r\n    backgroundOnClick?: () => void;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n    _id: string\r\n    show: boolean;\r\n    id:string\r\n\r\n}\r\n\r\nconst ModalUpdateCards: React.FC<ModalUpdateType> = (\r\n    {\r\n        button = 'save',\r\n        enableBackground,\r\n        backgroundStyle,\r\n        backgroundOnClick = () => {},\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        show,\r\n        close,\r\n        _id,  ///id card\r\n        id    //pack\r\n\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n    const [question,setQuestion]=useState('qestion')\r\n    const [comments,setComments]=useState('comment')\r\n    const [saveInputs, setSaveInputs] = useState({\r\n        f: () => {}\r\n    });\r\n\r\n    const successCloseModal = () => {\r\n\r\n        const objcards:cardsTypeobj<cardsPostType>={card:{cardsPack_id:_id,question: question,answer:comments}}\r\n        dispatch(unpdateCardTC({_id, id, comments, question}))\r\n        setQuestion('')\r\n\r\n        saveInputs.f();\r\n        // setNewName(newName || '');\r\n        setSaveInputs({\r\n            f: () => {}\r\n        }); // unsubscribe\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            enableBackground={enableBackground}\r\n            backgroundOnClick={() => {\r\n                // setNewName(newName);\r\n                backgroundOnClick()\r\n            }}\r\n            modalOnClick={modalOnClick}\r\n            show={true}\r\n        >\r\n            <div className={s.closeBtn}>\r\n                <button onClick={()=> close()}>x</button>\r\n            </div>\r\n            {\"update name pack\"}\r\n            <div>\r\n                <input className={s.setNameInput}\r\n                       name={'name'}\r\n                       type={'text'}\r\n                       value={question}\r\n                       onChange={e => setQuestion(e.currentTarget.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <input className={s.setNameInput}\r\n                       name={'name'}\r\n                       type={'text'}\r\n                       value={comments}\r\n                       onChange={e => setComments(e.currentTarget.value)}\r\n                />\r\n            </div>\r\n            <div className={s.rowBtn}>\r\n                <div>\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={() => close()}\r\n                        label={'cancel'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={successCloseModal}\r\n                        label={'save'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModalUpdateCards;","import React, {CSSProperties, ReactNode, useState} from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport s from \"./Modals.module.css\"\r\nimport {unpdatePackTC} from '../../../m2-bll/packReducer';\r\nimport Modal from './Modal';\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {cardPackPostType, cardsPackTypeobj, updatePackType} from '../../../m3-dal/packs-api';\r\nimport { addCardsTC, unpdateCardTC } from '../../../m2-bll/cardsReducer';\r\nimport {cardsPostType, cardsTypeobj } from '../../../m3-dal/cards-api';\r\n\r\ntype ModalUpdateType = {\r\n    close: () => void;\r\n    button?: ReactNode;\r\n    enableBackground?: boolean;\r\n    backgroundStyle?: CSSProperties;\r\n    backgroundOnClick?: () => void;\r\n    modalStyle?: CSSProperties;\r\n    modalOnClick?: () => void;\r\n    show: boolean;\r\n    id:string\r\n\r\n}\r\n\r\nconst ModalAddCards: React.FC<ModalUpdateType> = (\r\n    {\r\n        button = 'save',\r\n        enableBackground,\r\n        backgroundStyle,\r\n        backgroundOnClick = () => {},\r\n        modalStyle,\r\n        modalOnClick = () => {},\r\n        show,\r\n        close,\r\n        id    //pack\r\n\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n    const [question,setQuestion]=useState('qestion')\r\n    const [answer,setAnswer]=useState('answer')\r\n    const [saveInputs, setSaveInputs] = useState({\r\n        f: () => {}\r\n    });\r\n\r\n    const successCloseModal = () => {\r\n\r\n        const objcards:cardsTypeobj<cardsPostType>={card:{cardsPack_id:id,question: question,answer:answer}}\r\n\r\n        dispatch(addCardsTC(objcards))\r\n        setQuestion('')\r\n\r\n        saveInputs.f();\r\n        // setNewName(newName || '');\r\n        setSaveInputs({\r\n            f: () => {}\r\n        }); // unsubscribe\r\n        close();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            enableBackground={enableBackground}\r\n            backgroundOnClick={() => {\r\n                // setNewName(newName);\r\n                backgroundOnClick()\r\n            }}\r\n            modalOnClick={modalOnClick}\r\n            show={true}\r\n        >\r\n            <div className={s.closeBtn}>\r\n                <button onClick={()=> close()}>x</button>\r\n            </div>\r\n            {\"update name pack\"}\r\n            <div>\r\n                <input className={s.setNameInput}\r\n                       name={'name'}\r\n                       type={'text'}\r\n                       value={question}\r\n                       onChange={e => setQuestion(e.currentTarget.value)}\r\n                />\r\n            </div>\r\n            <div>\r\n                <input className={s.setNameInput}\r\n                       name={'name'}\r\n                       type={'text'}\r\n                       value={answer}\r\n                       onChange={e => setAnswer(e.currentTarget.value)}\r\n                />\r\n            </div>\r\n            <div className={s.rowBtn}>\r\n                <div>\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={() => close()}\r\n                        label={'cancel'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={successCloseModal}\r\n                        label={'save'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ModalAddCards;","import {Slider} from \"antd\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport s from './searchPack.module.css';\r\nimport 'antd/dist/antd.css';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setPacksError} from \"../../../m2-bll/packReducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {getCardsSearch} from \"../../../m2-bll/cardsReducer\";\r\n\r\n\r\nexport let SearchCards = React.memo(() => {\r\n        const dispatch = useDispatch();\r\n        const cards = useSelector((state: AppRootStateType) => state.cards.cards);\r\n        const error = useSelector((state: AppRootStateType) => state.cards.error);\r\n        const page = useSelector((state: AppRootStateType) => state.packs.page);\r\n        const id = useSelector<AppRootStateType, string | null>(state => state.cards.currentIDpack)\r\n\r\n        const [cardAnswer, setCardAnswer] = useState<string>(\"\");\r\n        const [cardQuestion, setCardQuestion] = useState<string>(\"\");\r\n        const [min, setMin] = useState<number>(0);\r\n        const [max, setMax] = useState<number>(10);\r\n\r\n        const setCardAnswerSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setCardAnswer(e.currentTarget.value)\r\n        }\r\n        const setCardQuestionSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n            setCardQuestion(e.currentTarget.value)\r\n        }\r\n\r\n        const setMinMaxValue = (arr: number[]) => {\r\n            let min = arr[0]\r\n            let max = arr[1]\r\n            if (min > 0) {\r\n                setMin(min)\r\n            }\r\n            if (max < 100) {\r\n                setMax(max)\r\n            }\r\n        }\r\n\r\n        const getPacksCallback = () => {\r\n            if (!!cards) {\r\n                dispatch(getCardsSearch(cardAnswer, cardQuestion, min, max, page, id))\r\n            } else {\r\n                dispatch(setPacksError(error))\r\n            }\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={s.searchPack}>\r\n                <div>\r\n                    <input\r\n                        placeholder={\"Question\"}\r\n                        type=\"text\"\r\n                        name={\"search\"}\r\n                        onChange={setCardQuestionSearch}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        placeholder={\"Answer\"}\r\n                        type=\"text\"\r\n                        name={\"search\"}\r\n                        onChange={setCardAnswerSearch}\r\n                    />\r\n                </div>\r\n                <Button\r\n                    primary={true}\r\n                    onClick={getPacksCallback}\r\n                    label={'Search'}\r\n                    backgroundColor={'blue'}\r\n                />\r\n                <div className={s.search_table}>\r\n                    <Slider\r\n                        onChange={setMinMaxValue}\r\n                        className={s.slider}\r\n                        range={{draggableTrack: true}}\r\n                        defaultValue={[0, 10]}/>\r\n                </div>\r\n                <div style={{fontSize: \"50px\", color: \"red\"}}>{cards.length === 0 && error}</div>\r\n            </div>\r\n        )\r\n    }\r\n)\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport s from './Cards.module.css'\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {NavLink, useHistory, useParams} from \"react-router-dom\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {getCardTC, setcurrentIDcard} from \"../../../m2-bll/cardsReducer\";\r\nimport {CardType} from \"../../../m3-dal/cards-api\";\r\nimport Loading from \"../../common/Loader/Loading\";\r\nimport ModalDeleteCards from \"../modal/ModalDeleteCards\";\r\nimport ModalUpdateCards from \"../modal/ModalUpdateCards\";\r\nimport ModalAddCards from \"../modal/ModalAddCards\";\r\nimport {SearchCards} from \"../searchPack/SearchCards\";\r\n\r\ntype PropTyPe = {\r\n    packID: string\r\n};\r\n\r\ntype QuizParams = {\r\n    id: string;\r\n};\r\nconst CardsContainer = React.memo(\r\n    () => {\r\n        const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n        const idS = useSelector<AppRootStateType, string | null>(state => state.cards.currentIDpack)\r\n        const {id} = useParams<QuizParams>();\r\n        const dispatch = useDispatch();\r\n        let history = useHistory();\r\n\r\n\r\n        useEffect(() => {\r\n            dispatch(getCardTC(1, id))\r\n            if (!id && idS) {\r\n                dispatch(getCardTC(1, idS))\r\n                history.push(`/cards/${idS}`)\r\n            }\r\n        }, [id])\r\n\r\n\r\n        if (!cards) {\r\n            return <Loading/>\r\n        }\r\n\r\n        return (<div>\r\n                <Cards\r\n                    cards={cards}\r\n                    idPack={id}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n)\r\ntype Propstype = {\r\n    cards: Array<CardType>\r\n    idPack: string\r\n}\r\nconst Cards = React.memo(\r\n    ({cards, idPack}: Propstype) => {\r\n\r\n        const dispatch = useDispatch()\r\n        const [show, setShow] = useState<boolean>(false);\r\n        const [question, setQuestion] = useState('testmy21')\r\n        const [comments, setComments] = useState('answer my21')\r\n        const [showModalDelete, setShowModalDelete] = useState<string>('');\r\n        const [showUpdateModal, setShowUpdateModal] = useState<string>(\"\");\r\n        const [showAddCardModal, setshowAddCardModal] = useState<string>(\"\");\r\n        ///id card for modal:\r\n        //  const [updateID, setUpdate] = useState<string>(\"\");\r\n\r\n\r\n// const dellH=useCallback((id:string)=>{\r\n//     deleteCardHandler(id)\r\n// },[])\r\n\r\n        const deleteCardHandler1 = useCallback((idCard: string) => {\r\n            // const callcback=deleteCardTC.bind(this,idCard,idPack)\r\n\r\n            setShowModalDelete(idCard)\r\n\r\n            // dispatch(deleteCardTC(idCard,idPack))\r\n        }, [])\r\n\r\n        const updateH = useCallback((_id: string) => {\r\n            setShowUpdateModal(_id)\r\n\r\n        }, [cards])\r\n\r\n        const addCardHandler = useCallback(() => {\r\n            setshowAddCardModal('open')\r\n\r\n        }, [])\r\n        const showcurrencard = (id: string) => {\r\n            dispatch(setcurrentIDcard(id))\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                {/*если update true, откроется модалка*/}\r\n                {Boolean(showUpdateModal) && <ModalUpdateCards\r\n                    close={() => setShowUpdateModal('')}\r\n                    enableBackground={true}\r\n                    backgroundOnClick={() => setShowUpdateModal('')}\r\n                    _id={showUpdateModal} ///id card\r\n                    show={show}\r\n                    id={idPack}\r\n                />}\r\n                {/*если update true, откроется ModalAddCards*/}\r\n                {Boolean(showAddCardModal) && <ModalAddCards\r\n                    close={() => setshowAddCardModal('')}\r\n                    enableBackground={true}\r\n                    backgroundOnClick={() => setshowAddCardModal('')}\r\n                    show={show}\r\n                    id={idPack}\r\n                />}\r\n                {/*если _id={showModalDelete} строка, откроется модалка*/}\r\n                {Boolean(showModalDelete) && <ModalDeleteCards\r\n                    close={() => setShowModalDelete('')}\r\n                    enableBackground={true}\r\n                    backgroundOnClick={() => setShowModalDelete('')}\r\n                    _id={idPack}\r\n                    idCArd={showModalDelete}\r\n                    show={show}\r\n                />}\r\n                {/*<div>*/}\r\n                {/*    <input*/}\r\n                {/*        placeholder={'Enter question'}*/}\r\n                {/*        className={s.inputQuestion}/>*/}\r\n                {/*    <input*/}\r\n                {/*        placeholder={'Enter answer'}*/}\r\n                {/*        className={s.inputAnswer}/>*/}\r\n                {/*    <Button*/}\r\n                {/*        label={'Save'}/>*/}\r\n                {/*</div>*/}\r\n\r\n                <SearchCards/>\r\n                <table className={s.table}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Answer</th>\r\n                        <th>Question</th>\r\n                        <th>Grade</th>\r\n                        <th>Shots</th>\r\n                        <th><Button onClick={addCardHandler}\r\n                                    label={'Add Card'}/>\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n                    {cards.map((c: CardType) => {\r\n                        return <tbody key={c._id} className={s.packData}>\r\n                        <tr>\r\n                            <td>{c.answer}</td>\r\n                            <td onClick={() => showcurrencard(c._id)}><NavLink\r\n                                to={`/card/${c._id}`}>{c.question}</NavLink></td>\r\n                            {/*<NavLink to={`/cards/${p._id}`} onClick={() => showCards(p._id)}>Cards</NavLink>*/}\r\n\r\n                            <td>{c.grade}</td>\r\n                            <td>{c.shots}</td>\r\n                            <td>\r\n                                <Button\r\n                                    onClick={() => updateH(c._id)}\r\n                                    label={'Update'}/>\r\n                                <Button\r\n                                    onClick={() => deleteCardHandler1(c._id)}\r\n                                    label={'Delete'}/>\r\n                            </td>\r\n                        </tr>\r\n                        </tbody>\r\n                    })\r\n                    }\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n)\r\nexport default CardsContainer;\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport s from \"../login/Login.module.css\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {loginTC} from \"../../../m2-bll/loginReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginParamsType} from \"../../../m3-dal/auth-api\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect, useHistory, useParams} from \"react-router-dom\";\r\nimport Profile from \"../profile/Profile\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport {minMaxLength, validEmail} from \"../../common/validators.ts\";\r\nimport {resetPasswordInfo, setForgotPasswordError} from \"../../../m2-bll/forgotReducer\";\r\nimport {findCardToLearn, setcurrentIDcard, setGradeTC} from \"../../../m2-bll/cardsReducer\";\r\nimport {CardType, putGradeType} from \"../../../m3-dal/cards-api\";\r\nimport Loading from \"../../common/Loader/Loading\";\r\nimport {getPacksTC} from \"../../../m2-bll/packReducer\";\r\n\r\n\r\ntype QuizParams = {\r\n    id: string;\r\n};\r\nexport const Card = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const {id} = useParams<QuizParams>()\r\n    dispatch(findCardToLearn(id))\r\n    const idcard = useSelector<AppRootStateType, string | null>(state => state.cards.currentIDcard)\r\n\r\n    const cardToLearn = useSelector<AppRootStateType, CardType>(state => state.cards.cardToLearn['0'])\r\n    debugger\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n    const [randomC, setrandomC] = useState(false)\r\n    let history = useHistory();\r\n\r\n//     useEffect(() => {\r\n//         // dispatch(findCardToLearn(id))\r\n//         if (!id && idcard) {\r\n//             dispatch(findCardToLearn(idcard))\r\n//             history.push(`/card/${idcard}`)\r\n//\r\n//         }\r\n//         history.push(`/card/${id}`)\r\n// debugger\r\n//     }, [randomC, cardToLearn])\r\n\r\n\r\n    const getRandomCard = () => {\r\n        setrandomC(!randomC)\r\n    }\r\n    if (randomC) {\r\n        const getCard = (cards: CardType[]) => {\r\n            const sum = cards.reduce((acc, card) => acc + (6 - card.grade) * (6 - card.grade), 0);\r\n            const rand = Math.random() * sum;\r\n            const res = cards.reduce((acc: { sum: number, id: number }, card, i) => {\r\n                    const newSum = acc.sum + (6 - card.grade) * (6 - card.grade);\r\n                    return {sum: newSum, id: newSum < rand ? i : acc.id}\r\n                }\r\n                , {sum: 0, id: -1});\r\n            console.log('test: ', sum, rand, res)\r\n\r\n            return cards[res.id + 1];\r\n        }\r\n\r\n        const randomCard = getCard(cards)\r\n// console.log(randomCard)\r\n        const randomId = randomCard._id\r\n        history.push(`/card/${randomId}`)\r\n\r\n        setrandomC(!randomC)\r\n        return <CardContent id={randomId} getRandomCard={getRandomCard} cardToLearn={randomCard}/>\r\n    }\r\n\r\n    return <CardContent id={id} getRandomCard={getRandomCard} cardToLearn={cardToLearn}/>\r\n\r\n\r\n}\r\ntype PropType = {\r\n    cardToLearn: CardType\r\n    id: string\r\n    getRandomCard?: () => void\r\n}\r\n\r\n// export  type CardType = {\r\n//     answer: string\r\n//     question: string\r\n//     cardsPack_id: string\r\n//     grade: number\r\n//     rating: number\r\n//     shots: number\r\n//     type: string\r\n//     user_id: string\r\n//     created: string\r\n//     updated: string\r\n//     __v: number\r\n//     _id: string\r\n//\r\n//     answerImg: string\r\n//     answerVideo: string\r\n//     comments: string\r\n//     more_id: string\r\n//     questionImg: string\r\n//     questionVideo: string}\r\n\r\nconst CardContent: React.FC<PropType> = ({\r\n                                             cardToLearn, id,\r\n                                             getRandomCard\r\n\r\n                                         }: PropType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const [grade, setGrade] = useState('')\r\n    const [answer, showAnswer] = useState(false)\r\n    const onClickAnswwrButton = () => {\r\n        showAnswer(!answer)\r\n    }\r\n    if (answer) {\r\n        const onValueChange = (e: any) => {\r\n            setGrade(e.target.value)\r\n        }\r\n        const formSubmit = (event: any) => {\r\n            let gr = Number(grade)\r\n            const gradeto: putGradeType = {grade: gr, card_id: id}\r\n            event.preventDefault();\r\n            dispatch(setGradeTC(gradeto))\r\n            console.log(grade)\r\n        }\r\n        return (\r\n            <div className={s.background}>\r\n                <div className={s.registerBlock}>\r\n                    <p> Please grade your answer </p>\r\n\r\n                    <div><h2>Question:</h2>\r\n                        {cardToLearn.question}</div>\r\n                    <div><h2>Answer:</h2>\r\n                        {cardToLearn.answer}</div>\r\n\r\n                    <div><h2>Grade your answear:</h2>\r\n                    </div>\r\n                    <form onSubmit={formSubmit}>\r\n                        <div className=\"radio\">\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"1\"\r\n                                    checked={grade == \"1\"}\r\n                                    onChange={onValueChange}\r\n                                />\r\n                                1\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"radio\">\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"2\"\r\n                                    checked={grade == \"2\"}\r\n                                    onChange={onValueChange}\r\n                                />\r\n                                2\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"radio\">\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"3\"\r\n                                    checked={grade == \"3\"}\r\n                                    onChange={onValueChange}\r\n                                />\r\n                                3\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"radio\">\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"4\"\r\n                                    checked={grade == \"4\"}\r\n                                    onChange={onValueChange}\r\n                                />\r\n                                4\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"radio\">\r\n                            <label>\r\n                                <input\r\n                                    type=\"radio\"\r\n                                    value=\"5\"\r\n                                    checked={grade == \"5\"}\r\n                                    onChange={onValueChange}\r\n                                />\r\n                                5\r\n                            </label>\r\n                        </div>\r\n                        <div>\r\n                            Selected Grade is : {grade}\r\n                        </div>\r\n                        <button className=\"btn btn-default\" type=\"submit\">\r\n                            Send Grade\r\n                        </button>\r\n\r\n\r\n                    </form>\r\n\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={onClickAnswwrButton}\r\n                        label={!answer ? 'show' : 'Hide'}\r\n                    />\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={getRandomCard}\r\n                        label={\"GetRaNDOMCArd\"}\r\n                    />\r\n                </div>\r\n\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n    return (\r\n        <div className={s.background}>\r\n            <div className={s.registerBlock}>\r\n                <p> Please think about answer </p>\r\n                <div><h2>Question:</h2>\r\n                    {cardToLearn.question}</div>\r\n                <Button\r\n                    primary={true}\r\n                    onClick={onClickAnswwrButton}\r\n                    label={'Show Answer'}\r\n                />\r\n                <Button\r\n                    primary={true}\r\n                    onClick={getRandomCard}\r\n                    label={\"GetRaNDOMCArd\"}\r\n                />\r\n                {/*отобразить сообщение при успешной смене пароля*/}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport Error404 from '../common/Error404';\r\nimport Registration from '../components/registration/Registration';\r\nimport ForgotPassword from '../components/forgotPassword/ForgotPassword';\r\nimport Profile from '../components/profile/Profile';\r\nimport {Login} from '../components/login/Login';\r\nimport Packs from '../components/packs/Packs';\r\nimport Cards from '../components/cards/Cards';\r\nimport NewPassword from '../components/forgotPassword/NewPassword';\r\nimport CardsContainer from '../components/cards/Cards';\r\nimport { Card } from '../components/cardComponent/card';\r\n\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <div> Hello</div>}/>\r\n                <Route exact path={'/registration'} render={() => <Registration/>}/>\r\n                <Route exact path={'/forgot-password'} render={() => <ForgotPassword/>}/>\r\n                <Route exact path={'/new-password/:token'} render={() => <NewPassword/>}/>\r\n                {/*<Route exact path={'/new-password/:token/$token$'} render={() => <Login/>}/>*/}\r\n                <Route exact path={'/profile'} render={() => <Profile/>}/>\r\n                <Route exact path={'/login'} render={() => <Login/>}/>\r\n                <Route exact path={'/packs'} render={() => <Packs/>}/>\r\n                <Route exact path={'/card/:id?'} render={() => <Card/>}/>\r\n                <Route exact path={'/cards/:id?'} render={() => <CardsContainer/>}/>\r\n                {/*<Route path={'/404'} render={() => <Error404/>}/>*/}\r\n                {/*<Redirect path={'*'} to={'/404'}/>*/}\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport Header from \"./header/Header\";\r\nimport Routes from \"./routes/Routes\";\r\nimport {initializeAppTC} from \"../m2-bll/appReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../m2-bll/store\";\r\nimport Loading from \"./common/Loader/Loading\";\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <Loading/>\r\n    }\r\n\r\n  return (\r\n      <HashRouter>\r\n    <div className=\"App\">\r\n      {/*// hashrouter //  provider*/}\r\n      <Header />\r\n      <Routes />\r\n    </div>\r\n      </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {Dispatch} from \"redux\";\r\n\r\n\r\ntype InitialStateType = {\r\n\r\n}\r\n\r\nconst initialState: any = {\r\n\r\n}\r\n\r\n\r\nexport const searchReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\n\r\nexport const searchTC = () => async (dispatch: Dispatch) => {\r\n\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = any","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {packReducer} from \"./packReducer\";\r\nimport {registerReducer} from \"./registerReducer\";\r\nimport {loginReducer} from \"./loginReducer\";\r\nimport { forgotReducer } from './forgotReducer';\r\nimport {cardsReducer} from \"./cardsReducer\";\r\nimport { searchReducer } from './searchReducer';\r\nimport {appReducer} from \"./appReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    packs: packReducer,\r\n    register: registerReducer,\r\n    login: loginReducer,\r\n    forgotPassword: forgotReducer,\r\n    cards: cardsReducer,\r\n    search: searchReducer,\r\n    app:appReducer,\r\n    profile:profileReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./n1-main/m2-bll/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Profile_register__3ytMS\",\"input\":\"Profile_input__3trVf\",\"errorText\":\"Profile_errorText__10sNh\",\"wrapProfile\":\"Profile_wrapProfile__1Dtd4\",\"wrapAva\":\"Profile_wrapAva__3yS0y\",\"wrapInfo\":\"Profile_wrapInfo__1K_wu\",\"infoBlock\":\"Profile_infoBlock__1m44S\",\"titles\":\"Profile_titles__3f-2N\",\"info\":\"Profile_info__1eLUi\",\"background\":\"Profile_background__2nYDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerBlock\":\"Login_registerBlock__2Uu5g\",\"registerForm\":\"Login_registerForm__3GBjc\",\"background\":\"Login_background__1Qn11\",\"registerFormInput\":\"Login_registerFormInput__y_dVU\",\"errorText\":\"Login_errorText__2ADtf\",\"check\":\"Login_check__3joLj\",\"inputcheck\":\"Login_inputcheck__1Rzwc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__1O6sh\",\"item\":\"Header_item__GiIPp\",\"active\":\"Header_active__Z6tEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerBlock\":\"ForgotPassword_registerBlock__fghVH\",\"registerForm\":\"ForgotPassword_registerForm__1-hc9\",\"forgotPasswordBlock\":\"ForgotPassword_forgotPasswordBlock__1lQja\",\"registerFormInput\":\"ForgotPassword_registerFormInput__3nQ19\",\"errorText\":\"ForgotPassword_errorText__2WLX5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerBlock\":\"Registration_registerBlock__1TFUf\",\"registerForm\":\"Registration_registerForm__2kzUf\",\"background\":\"Registration_background__VAxOi\",\"registerFormInput\":\"Registration_registerFormInput__3T-iz\",\"errorText\":\"Registration_errorText__17V7X\",\"formSummaryError\":\"Registration_formSummaryError__1i2po\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchPack\":\"searchPack_searchPack__2zyY1\",\"search_table\":\"searchPack_search_table__3Baoe\",\"slider\":\"searchPack_slider__VJJRc\",\"paginator\":\"searchPack_paginator__AQbWI\",\"pageNumber\":\"searchPack_pageNumber__E3fWh\",\"selectedPage\":\"searchPack_selectedPage__2wQQ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__BgdN6\",\"heading\":\"Packs_heading__bP6dS\",\"inputTitlePack\":\"Packs_inputTitlePack__3maQP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageNumber\":\"Paginator_pageNumber__1m7Lj\",\"selectedPage\":\"Paginator_selectedPage__3iKQf\",\"paginator\":\"Paginator_paginator__2Pmwj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sortContainer\":\"SortPacks_sortContainer__2oQCZ\",\"active\":\"SortPacks_active__23N89\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Cards_table__OFubS\",\"inputTitlePack\":\"Cards_inputTitlePack__1vPh8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingStyle\":\"loading_loadingStyle__2gCVt\"};"],"sourceRoot":""}