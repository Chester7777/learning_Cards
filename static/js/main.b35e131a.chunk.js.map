{"version":3,"sources":["n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/common/Button/Button.tsx","n1-main/m3-dal/auth-api.ts","n1-main/m2-bll/registerReducer.ts","n1-main/m1-ui/components/registration/Registration.tsx","n1-main/m3-dal/forgot-api.ts","n1-main/m2-bll/forgotReducer.ts","n1-main/m1-ui/components/forgotPassword/ForgotPassword.tsx","n1-main/m2-bll/profileReducer.ts","n1-main/m2-bll/appReducer.ts","n1-main/m2-bll/loginReducer.tsx","n1-main/m1-ui/components/profile/Profile.tsx","n1-main/m1-ui/components/login/Login.tsx","n1-main/m1-ui/common/validators.ts.js","n1-main/m1-ui/components/searchPack/SearchPack.tsx","n1-main/m1-ui/components/searchPack/Paginator.tsx","n1-main/m1-ui/components/packs/Packs.tsx","n1-main/m1-ui/components/cards/Cards.tsx","n1-main/m1-ui/components/forgotPassword/NewPassword.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/common/Loader/__Iphone-spinner-1.gif","n1-main/m1-ui/common/Loader/Loading.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m2-bll/packReducer.ts","n1-main/m2-bll/cardsReducer.ts","n1-main/m2-bll/searchReducer.tsx","n1-main/m2-bll/store.ts","index.tsx","n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/components/profile/Profile.module.css","n1-main/m1-ui/components/forgotPassword/ForgotPassword.module.css","n1-main/m1-ui/components/login/Login.module.css","n1-main/m1-ui/components/registration/Registration.module.css","n1-main/m1-ui/components/searchPack/searchPack.module.css","n1-main/m1-ui/components/cards/Cards.module.css","n1-main/m1-ui/components/packs/Packs.module.css","n1-main/m1-ui/common/Loader/loading.module.css"],"names":["Header","name","useSelector","state","profile","isLoggedIn","login","className","s","nav","item","to","activeClassName","active","Button","id","onBlur","disabled","onClick","primary","size","backgroundColor","label","props","mode","type","join","style","instance","axios","create","baseURL","withCredentials","authAPI","data","post","delete","email","password","initialState","isRegistered","setError","Registration","dispatch","useDispatch","ApiError","register","useState","setEmail","setPassword","confirmPassword","setConfirmPassword","errorPassword","setErrorPassword","background","registerBlock","registerForm","htmlFor","registerFormInput","onChange","e","target","value","event","length","then","res","statusText","catch","err","text","response","error","alert","SendRegisterTC","formSummaryError","PasswordAPI","message","from","resetPasswordToken","info","isInitialized","forgotPassword","setForgotPassword","resetPasswordInfo","setForgotPasswordError","ForgotPassword","React","memo","onClickBtn","useCallback","a","forgotPasswordTC","forgotPasswordBlock","currentTarget","trim","display","marginLeft","marginRight","marginBottom","marginTop","errorText","_id","avatar","publicCardPacksCount","created","updated","isAdmin","verified","rememberMe","setProfileDataAC","setLoginErrorAC","status","setIsInitializedAC","setIsLoggedInAC","Profile","ava","wrapProfile","wrapAva","backgroundImage","wrapInfo","infoBlock","titles","Login","onClickHandler","console","log","loginTC","LoginContent","setRememberMe","emailError","setEmailError","passwordError","setPasswordError","RegExp","test","minLength","maxLength","result","minMaxLength","check","inputcheck","checked","SearchPack","searchPack","search_table","slider","range","draggableTrack","defaultValue","Paginator","paginator","Packs","placeholder","inputTitlePack","table","Cards","inputQuestion","inputAnswer","NewPassword","token","useParams","resetNewPassword","Routes","exact","path","render","Loading","loadingStyle","src","spiner","alt","App","app","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","cards","newCardsTitle","rootReducer","combineReducers","packs","action","search","newState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.b35e131a.chunk.js","sourcesContent":["import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\n\r\nconst Header = () => {\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.name)\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    return (\r\n        <nav className={s.nav}>\r\n            {isLoggedIn ? <div className={s.item}>\r\n                    {<NavLink to='/Profile' activeClassName={s.active}>{name}</NavLink>}\r\n                </div> :\r\n                <div className={s.item}>\r\n                    {<NavLink to='/Login' activeClassName={s.active}>Login</NavLink>}\r\n                </div>}\r\n\r\n            <div className={s.item}>\r\n                <NavLink to='/Registration' activeClassName={s.active}>Registration</NavLink>\r\n            </div>\r\n            {!isLoggedIn ? <div className={s.item}>\r\n                <NavLink to='/forgot-password' activeClassName={s.active}>Forgot Password</NavLink>\r\n            </div> :\r\n                <div className={s.item}>\r\n                    <NavLink to='/new-password' activeClassName={s.active}>New Password</NavLink>\r\n                </div>}\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to='/forgot-password' activeClassName={s.active}>Forgot Password</NavLink>*/}\r\n            {/*</div>*/}\r\n            {/*<div className={s.item}>*/}\r\n            {/*    <NavLink to='/new-password' activeClassName={s.active}>New Password</NavLink>*/}\r\n            {/*</div>*/}\r\n            <div className={s.item}>\r\n                <NavLink to='/Profile' activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/packs' activeClassName={s.active}>Packs</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to='/cards' activeClassName={s.active}>Cards</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {MouseEvent} from 'react';\r\nimport './Button.css';\r\n\r\nexport interface ButtonProps {\r\n    /**\r\n     * Is this the principal call to action on the page?\r\n     */\r\n    primary?: boolean;\r\n    /**\r\n     * What background color to use\r\n     */\r\n    backgroundColor?: string;\r\n    /**\r\n     * How large should the button be?\r\n     */\r\n    size?: 'small' | 'medium' | 'large';\r\n    /**\r\n     * Button contents\r\n     */\r\n    label: string;\r\n    /**\r\n     * Optional click handler\r\n     */\r\n    onClick?: (event: MouseEvent<HTMLButtonElement>) => void;\r\n\r\n    onBlur?: () => void\r\n\r\n    disabled?: boolean\r\n\r\n    id?: string\r\n}\r\n\r\n/**\r\n * Primary UI component for user interaction\r\n */\r\nexport const Button: React.FC<ButtonProps> = ({\r\n                                                  id,\r\n                                                  onBlur,\r\n                                                  disabled,\r\n                                                  onClick,\r\n                                                  primary = false,\r\n                                                  size = 'medium',\r\n                                                  backgroundColor,\r\n                                                  label,\r\n                                                  ...props\r\n                                              }) => {\r\n    const mode = primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n\r\n    return (\r\n        <button\r\n            id={id}\r\n            disabled={disabled}\r\n            onBlur={onBlur}\r\n            type=\"button\"\r\n            onClick={onClick}\r\n            className={['storybook-button', `storybook-button--${size}`, mode].join(' ')}\r\n            style={{backgroundColor}}\r\n            {...props}\r\n        >\r\n            {label}\r\n        </button>\r\n    );\r\n};","import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n\r\n})\r\n// api\r\nexport const authAPI = {\r\n\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponceLoginType>('/auth/login', data)\r\n           },\r\n    logOut() {\r\n        return instance.delete<ResponceLogOutType>('/auth/me')\r\n         },\r\n    me(){\r\n        return instance.post('auth/me')\r\n    },\r\n\r\n\r\n    signUp(email: string, password: string) {\r\n        return instance.post<{ addedUser: ResponceLoginType, error?: string }>('auth/register', {email, password})\r\n    },\r\n\r\n}\r\n\r\n\r\nexport const searchAPI = {}\r\n\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n\r\n}\r\n\r\nexport type ResponceLoginType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: string; // need Data\r\n    updated: string; // need Data\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\n\r\nexport type ResponceLogOutType = {\r\n    info: string;\r\n    error: string;\r\n}\r\nexport type SignUpParamsType = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, SignUpParamsType} from \"../m3-dal/auth-api\";\r\nimport {AxiosError} from \"axios\";\r\nimport {SetAppErrorActionType} from \"./appReducer\";\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type LoadingStatusType = any\r\n\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    setError: ''\r\n}\r\n\r\nexport const registerReducer = (state:InitialStateType = initialState, action: RegistrationActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n\r\n        case \"registration/SET-IS-REGISTRATION\":\r\n            return {...state, isRegistered: action.value}\r\n        case \"registration/SET-ERROR\":\r\n            return {...state, setError: action.text}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsRegistrationAC = (value: boolean) => ({\r\n    type: 'registration/SET-IS-REGISTRATION', value\r\n} as const)\r\n\r\nexport const setErrorAC = (text: string) => ({\r\n    type: 'registration/SET-ERROR', text\r\n} as const)\r\n\r\n\r\n// thunks\r\n\r\nexport const SendRegisterTC = (email:string, password: string) => (dispatch: Dispatch<RegistrationActionsType>) => {\r\n    authAPI.signUp(email, password)\r\n        .then( (res) => {\r\n            if (res.statusText === 'succeeded')\r\n            dispatch(setIsRegistrationAC(true))\r\n        })\r\n        .catch((err: AxiosError) => {\r\n            dispatch(setErrorAC(err.response?.data.error))\r\n        alert('some error')\r\n        })\r\n}\r\n\r\n\r\n// types\r\n\r\ntype RegistrationActionsType =\r\n     ReturnType<typeof setIsRegistrationAC>\r\n    | ReturnType<typeof setErrorAC>\r\n    | SetAppErrorActionType\r\n\r\n// type ThunkDispatch = Dispatch<any>","import React, {useState, MouseEvent} from \"react\";\r\nimport s from './Registration.module.css'\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {SendRegisterTC} from \"../../../m2-bll/registerReducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\n\r\n\r\nconst Registration = () => {\r\n    const dispatch = useDispatch()\r\n    const ApiError = useSelector<AppRootStateType, string>(state => state.register.setError)\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [errorPassword, setErrorPassword] = useState<string | null>(null)\r\n\r\n    const handleSubmit = (event: MouseEvent<HTMLButtonElement>) => {\r\n        if (password === confirmPassword && password.length >= 8) {\r\n            dispatch(SendRegisterTC(email, password))\r\n        } else if (password !== confirmPassword) {\r\n            setErrorPassword(\"Passwords don't match.\")\r\n        } else if (password.length < 8 || confirmPassword.length < 8) {\r\n            setErrorPassword(\"Password must contain at least 8 characters.\")\r\n        }\r\n    }\r\n\r\n\r\n    return <div className={s.background}>\r\n        <div className={s.registerBlock}>\r\n            <p> Please fill in the blank fields and press sign up </p>\r\n\r\n            <form className={s.registerForm}>\r\n                <div className={s.registerForm}>\r\n                    <label htmlFor={'email'}>Email</label>\r\n                    <div className={s.register}>\r\n                        <input className={s.registerFormInput}\r\n                               name={'email'}\r\n                               type={'email'}\r\n                               onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                    </div>\r\n\r\n                    <label htmlFor={'password'}>Password</label>\r\n                    <div className={s.register}>\r\n\r\n                        <input className={s.registerFormInput}\r\n                               name={'password'}\r\n                               type={'password'}\r\n                               onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n\r\n\r\n                    </div>\r\n\r\n                    <label htmlFor={'confirmPassword'}>Confirm password</label>\r\n                    <div className={s.register}>\r\n                        <input className={s.registerFormInput}\r\n                               name={'confirmPassword'}\r\n                               type={'password'}\r\n                               onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <Button\r\n                        primary={true}\r\n\r\n                        onClick={handleSubmit}\r\n                        label={'Sign Up'}\r\n                        backgroundColor={'blue'}/>\r\n                </div>\r\n                {ApiError && <div className={s.formSummaryError}>{ApiError}</div>}\r\n                {errorPassword ? <div className={s.formSummaryError}>{errorPassword}</div> : null}\r\n            </form>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Registration;","import axios from 'axios'\r\n\r\n\r\nconst settings = {\r\n    withCredentials: true\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    ...settings\r\n})\r\n\r\nexport const PasswordAPI = {\r\n    forgotPassword(email: string) {\r\n        const message = `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='https://chester7777.github.io/learning_Cards/#/new-password/$token$'> link</a></div>`\r\n        // const message = `<div style=\"background-color: lime; padding: 15px\"> password recovery link: <a href='http://localhost:3001/forgot-password#/new-password/$token$'> link</a></div>`\r\n        const from = \"test-front-admin <Es18.03.88@gmail.com>\"\r\n       return instance.post<ResetPasswordType>(\"auth/forgot\", {email, message, from})\r\n    },\r\n    resetPassword (password: string, resetPasswordToken: string) {\r\n      return instance.post<ResetPasswordType>(`auth/set-new-password`, {password, resetPasswordToken})\r\n    }\r\n}\r\n\r\n\r\ntype ResetPasswordType = {\r\n       info: string\r\n       error: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {PasswordAPI} from \"../m3-dal/forgot-api\";\r\n\r\n\r\ntype InitialStateType = {\r\n    info: string\r\n    error: string | null\r\n    isInitialized: boolean\r\n    forgotPassword: false\r\n    from: string\r\n    email: string\r\n    message: string\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    info: '',\r\n    error: null,\r\n    isInitialized: true,\r\n    forgotPassword: false,\r\n    from: \"\",\r\n    email: \"\",\r\n    message: \"\",\r\n    password: \"\",\r\n    resetPasswordToken: \"\"\r\n}\r\n\r\n//Reducer\r\nexport const forgotReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-FORGOT-PASSWORD\":\r\n            return {\r\n                ...state,\r\n                email: action.email,\r\n                message: action.message,\r\n                from: action.from\r\n            }\r\n        case \"RESET-PASSWORD\":\r\n            return {\r\n                ...state,\r\n                password: action.password,\r\n                resetPasswordToken: action.resetPasswordToken\r\n            }\r\n        case \"RESET-PASSWORD-INFO\":\r\n            return {\r\n                ...state,\r\n                info: action.info\r\n            }\r\n        case \"SET-FORGOT-PASSWORD-ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setForgotPassword = (email: string, message: string, from: string) => ({\r\n    type: \"SET-FORGOT-PASSWORD\", email, message, from\r\n} as const);\r\nexport const resetPassword = (password: string, resetPasswordToken: string) => ({\r\n    type: \"RESET-PASSWORD\", password, resetPasswordToken\r\n} as const);\r\nexport const resetPasswordInfo = (info: any) => ({\r\n    type: \"RESET-PASSWORD-INFO\", info\r\n} as const);\r\nexport const setForgotPasswordError = (error: string | null) => ({\r\n    type: \"SET-FORGOT-PASSWORD-ERROR\", error\r\n} as const);\r\n\r\n\r\n// thunks\r\nexport const forgotPasswordTC = (email: string, message: string, from: string) => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        await PasswordAPI.forgotPassword(email)\r\n        dispatch(setForgotPassword(email, message, from))\r\n    } catch (error) {\r\n        dispatch(setForgotPasswordError(error.response.data.error))\r\n    }\r\n}\r\n\r\n\r\nexport const resetNewPassword = (password: string, resetPasswordToken: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const res = await PasswordAPI.resetPassword(password, resetPasswordToken)\r\n        if (res.data.info == \"setNewPassword success —ฅ/ᐠ.̫ .ᐟฅ—\") {\r\n            dispatch(resetPasswordInfo(res.data.info))\r\n        }\r\n\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch(setForgotPasswordError(error.response.data.error))\r\n    }\r\n}\r\n\r\n\r\n// types\r\nexport type ActionsType =\r\n    ReturnType<typeof setForgotPassword> |\r\n    ReturnType<typeof resetPassword> |\r\n    ReturnType<typeof resetPasswordInfo> |\r\n    ReturnType<typeof setForgotPasswordError>\r\n\r\n\r\n\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport {Button} from '../../common/Button/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPasswordTC, setForgotPasswordError} from \"../../../m2-bll/forgotReducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport s from \"./ForgotPassword.module.css\"\r\n\r\n\r\nconst ForgotPassword = React.memo(function ForgotPassword() {\r\n\r\n    const dispatch = useDispatch();\r\n    const message = useSelector((state: AppRootStateType) => state.forgotPassword.message);\r\n    const from = useSelector((state: AppRootStateType) => state.forgotPassword.from);\r\n    const error = useSelector((state: AppRootStateType) => state.forgotPassword.error);\r\n\r\n\r\n    const [email, setEmail] = useState<string>(\"\");\r\n\r\n\r\n    const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value && e.currentTarget.value.trim() !== \"\") {\r\n            setEmail(e.currentTarget.value);\r\n        } else {\r\n            dispatch(setForgotPasswordError(error))\r\n        }\r\n    }\r\n\r\n    const onClickBtn = useCallback(() => {\r\n        dispatch(forgotPasswordTC(email, message, from))\r\n        setEmail('')\r\n    }, [email, dispatch])\r\n\r\n    return (\r\n        <div className={s.forgotPasswordBlock}>\r\n            <div className={s.registerBlock}>\r\n                <p> Please enter your email and press \"Forgot password\" </p>\r\n                <div className={s.registerForm}>\r\n                    <label htmlFor={'email'}>Email nya-admin@nya.nya</label>\r\n                    <div className={s.register}>\r\n                        <input\r\n                            onChange={handleChange}\r\n                            className={s.registerFormInput}\r\n                            type=\"email\"\r\n                            style={{\r\n                                display: \"block\",\r\n                                marginLeft: \"auto\",\r\n                                marginRight: 'auto',\r\n                                marginBottom: \"5px\",\r\n                                marginTop: \"5px\"\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <Button primary={true} onClick={onClickBtn} size={'small'} label={\"Forgot Password\"}/>\r\n                </div>\r\n                <div className={s.errorText}>{error}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\nexport default ForgotPassword;","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType, ResponceLoginType} from \"../m3-dal/auth-api\";\r\nimport {setIsLoggedInAC} from \"./loginReducer\";\r\nimport {setIsInitializedAC} from \"./appReducer\";\r\n\r\ntype profileStateType={\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar: string,\r\n    publicCardPacksCount: number,// количество колод\r\n    created: string,\r\n    updated: string,\r\n    isAdmin: boolean,\r\n    verified: boolean, // подтвердил ли почту\r\n    rememberMe: boolean,\r\n    error: string\r\n}\r\nconst initialState = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0,// количество колод\r\n    created: '',\r\n    updated: '',\r\n    isAdmin: false,\r\n    verified: false, // подтвердил ли почту\r\n    rememberMe: false,\r\n    error: ''\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setProfileDataAC>\r\n    |ReturnType<typeof logOutAC>\r\n|ReturnType<typeof setLoginErrorAC>\r\n\r\nexport const profileReducer = (state: any = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case 'login/SET-PROFILE-DATA': {\r\n            return {\r\n                ...state,_id: action.data._id,\r\n                email: action.data.email,\r\n                name: action.data.name,\r\n                avatar: action.data.avatar,\r\n                publicCardPacksCount: action.data.publicCardPacksCount,\r\n                created: action.data.created,\r\n                updated: action.data.updated,\r\n                isAdmin: action.data.isAdmin,\r\n                verified: action.data.verified, // подтвердил ли почту\r\n                rememberMe: action.data.rememberMe,\r\n                error: action.data.error\r\n                            }\r\n\r\n\r\n        }\r\n        case \"logOut\":\r\n            let newState={}\r\n            return newState\r\n        case \"login/SET-ERROR\":\r\n            return {...state,error:action.error}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setProfileDataAC = (data: ResponceLoginType) => ({type: 'login/SET-PROFILE-DATA', data} as const)\r\nexport const setLoginErrorAC = (error:string) => ({type: 'login/SET-ERROR', error} as const)\r\nexport const logOutAC=()=>({type:'logOut'}as const)\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../m3-dal/auth-api\";\r\nimport {setProfileDataAC} from \"./profileReducer\";\r\nimport {setIsLoggedInAC} from \"./loginReducer\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {\r\n                ...state, isInitialized: action.status\r\n            }\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setIsInitializedAC = (status: boolean) => ({type: 'APP/SET-INITIALIZED', status} as const)\r\n\r\nexport const initializeAppTC = () => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        const res = await authAPI.me()\r\n        if (res.statusText === 'OK') {\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setProfileDataAC(res.data))\r\n            dispatch(setIsLoggedInAC(true))\r\n        }\r\n    } catch (e) {\r\n        dispatch(setIsInitializedAC(true))\r\n\r\n        const error = e.response\r\n\r\n            ? e.response.data.error\r\n            : (e.message + ', more details in the console');\r\n\r\n        console.log('Error: ', {...e})\r\n    }\r\n\r\n}\r\n\r\n\r\nexport type setIsInitializedACType = ReturnType<typeof setIsInitializedAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType\r\n","import {Dispatch} from \"redux\"\r\nimport {authAPI, LoginParamsType} from \"../m3-dal/auth-api\";\r\nimport {SetAppErrorActionType, SetAppStatusActionType, setIsInitializedAC, setIsInitializedACType} from \"./appReducer\";\r\nimport {setLoginErrorAC, setProfileDataAC} from \"./profileReducer\";\r\n\r\n// types\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setProfileDataAC> | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | setIsInitializedACType |\r\n    ReturnType<typeof setLoginErrorAC>\r\n\r\nexport type RequestStatusType = any\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n\r\n}\r\n\r\n\r\nexport const loginReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = ({email, password, rememberMe}: LoginParamsType) => async (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setIsInitializedAC(false))\r\n    try {\r\n        const res = await authAPI.login({email, password, rememberMe})\r\n\r\n        if (res.statusText === 'OK')\r\n            dispatch(setIsInitializedAC(true))\r\n        dispatch(setIsLoggedInAC(true))\r\n        dispatch(setProfileDataAC(res.data))\r\n\r\n    } catch (e) {\r\n        dispatch(setIsInitializedAC(true))\r\n\r\n        const error = e.response\r\n            ? dispatch(setLoginErrorAC(e.response.data.error))\r\n            : (e.message + ', more details in the console');\r\n        console.log('Error: ', {...e})\r\n    }\r\n}\r\nexport const logoutTC = () => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        const res = await authAPI.logOut()\r\n        if (res.statusText === \"OK\") {\r\n            dispatch(setIsLoggedInAC(false))\r\n        }\r\n    } catch (e) {\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport s from './Profile.module.css'\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {logoutTC} from \"../../../m2-bll/loginReducer\";\r\nimport {logOutAC} from \"../../../m2-bll/profileReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nconst Profile =React.memo(function (){\r\n    const dispatch = useDispatch()\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.name)\r\n    const ava = useSelector<AppRootStateType, string>(state => state.profile.avatar)\r\n    const email = useSelector<AppRootStateType, string>(state => state.profile.email)\r\n    const created = useSelector<AppRootStateType, string>(state => state.profile.created)\r\n    const publicCardPacksCount = useSelector<AppRootStateType, string>(state => state.profile.publicCardPacksCount)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    function logOutHandler() {\r\n        dispatch(logoutTC())\r\n        dispatch(logOutAC())\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to='/login'/>\r\n\r\n    }\r\n    return (\r\n        <div className={s.background}>\r\n            <div className={s.wrapProfile}>\r\n                <div className={s.wrapAva} style={{backgroundImage: `url(${ava})`}}></div>\r\n                <div className={s.wrapInfo}>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>Name:</div>\r\n                        <div className={s.info}>{name}</div>\r\n                    </div>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>Email:</div>\r\n                        <div className={s.info}>{email}</div>\r\n                    </div>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>Registration date:</div>\r\n                        <div className={s.info}>{created}</div>\r\n                    </div>\r\n                    <div className={s.infoBlock}>\r\n                        <div className={s.titles}>Card Packs:</div>\r\n                        <div className={s.info}>{publicCardPacksCount}</div>\r\n                    </div>\r\n                    <Button primary={true} onClick={logOutHandler} label={\"LogOut\"}/>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n)\r\n\r\nexport default Profile;\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"../login/Login.module.css\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {loginTC} from \"../../../m2-bll/loginReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {LoginParamsType} from \"../../../m3-dal/auth-api\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport Profile from \"../profile/Profile\";\r\nimport {Simulate} from \"react-dom/test-utils\";\r\nimport {minMaxLength, validEmail} from \"../../common/validators.ts\";\r\nimport { resetPasswordInfo, setForgotPasswordError } from \"../../../m2-bll/forgotReducer\";\r\n\r\ntype  LoginContentPropsType = {\r\n\r\n    onClickHandler: ({email, password, rememberMe}: LoginParamsType) => void\r\n}\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onClickHandler = ({email, password, rememberMe}: LoginParamsType) => {\r\n        dispatch(loginTC({email, password, rememberMe}))\r\n    }\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/Profile'}/>\r\n    }\r\n\r\n    return <LoginContent onClickHandler={onClickHandler}/>\r\n\r\n\r\n}\r\n\r\nconst LoginContent: React.FC<LoginContentPropsType> = ({\r\n                                                           onClickHandler\r\n\r\n                                                       }) => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [rememberMe, setRememberMe] = useState(false)\r\n    const [emailError, setEmailError] = useState('')\r\n    const [passwordError, setPasswordError] = useState('')\r\n\r\n    const error = useSelector<AppRootStateType, string>(state => state.profile.error)\r\n\r\n    // отобразить сообщение при успешной смене пароля\r\n    const dispatch = useDispatch()\r\n    const info = useSelector<AppRootStateType, string>(state => state.forgotPassword.info)\r\n\r\n    const onchangeEmailHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value && validEmail(e.currentTarget.value)) {\r\n            setEmail(e.currentTarget.value)\r\n            setEmailError('')\r\n\r\n        } else {\r\n            setEmailError('Email not valid!')\r\n            setEmail(e.currentTarget.value)\r\n\r\n        }\r\n    }\r\n    const onchangePasswordHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value && minMaxLength(e.currentTarget.value, 5)) {\r\n            setPassword(e.currentTarget.value)\r\n            setPasswordError('')\r\n\r\n        } else {\r\n            setPasswordError('password not valid!')\r\n            setPassword(e.currentTarget.value)\r\n\r\n        }\r\n    }\r\n\r\n    const onClickLoginButton = () => {\r\n        onClickHandler({email, password, rememberMe})\r\n    }\r\n    \r\n    if (info === \"setNewPassword success —ฅ/ᐠ.̫ .ᐟฅ—\") {\r\n        dispatch(resetPasswordInfo(info))\r\n    } else {\r\n        dispatch(setForgotPasswordError(error))\r\n    }\r\n\r\n    return (\r\n        <div className={s.background}>\r\n            <div className={s.registerBlock}>\r\n                <p> Please fill in the blank fields and press Login </p>\r\n\r\n                <form className={s.registerForm}>\r\n\r\n                    <label htmlFor={'email'}>Email nya-admin@nya.nya</label>\r\n                    <div className={s.register}>\r\n                        <input\r\n                            className={s.registerFormInput}\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={email}\r\n                            onChange={onchangeEmailHandler}/>\r\n                    </div>\r\n\r\n                    <div className={s.errorText}>{emailError}</div>\r\n\r\n                    <label htmlFor={'password'}>Password 1qazxcvBG</label>\r\n                    <div className={s.register}>\r\n                        <input\r\n                            className={s.registerFormInput}\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={onchangePasswordHandler}\r\n                        />\r\n                    </div>\r\n                    <div className={s.errorText}>{passwordError}</div>\r\n                    <label htmlFor={'checkbox'}> <span className={s.check}>Remember Me</span></label>\r\n                    <input\r\n                        className={s.inputcheck}\r\n                        type={\"checkbox\"}\r\n                        name=\"rememberMe\"\r\n                        checked={rememberMe}\r\n                        onChange={(e) => setRememberMe(!rememberMe)}\r\n                    />\r\n                    <Button\r\n                        primary={true}\r\n                        onClick={onClickLoginButton}\r\n                        label={'Login'}\r\n                    />\r\n                    <div className={s.errorText}><p>{error}</p></div>\r\n                    {/*отобразить сообщение при успешной смене пароля*/}\r\n                    <div className={s.errorText}><p>{info}</p></div>\r\n                </form>\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","export function minMaxLength(text, minLength, maxLength) {\r\n    let result = !text || text.length < minLength;\r\n    if(maxLength)\r\n        result = result || text.length < minLength;\r\n    return !result;\r\n}\r\n\r\nexport function validEmail(text) {\r\n    const regex = RegExp(\r\n        /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\r\n    );\r\n\r\n    return regex.test(text)===true;\r\n}","import {Slider} from \"antd\";\r\nimport React from \"react\";\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport s from './searchPack.module.css';\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nexport let SearchPack = () => {\r\n\r\n\r\n\r\n    return (\r\n        <div className={s.searchPack}>\r\n            <div>\r\n                <input\r\n                    type=\"text\"\r\n                    name={\"search\"}\r\n                />\r\n            </div>\r\n            <Button\r\n                label={'Search'}\r\n                backgroundColor={'blue'}\r\n            />\r\n            <div className={s.search_table}>\r\n                <Slider className={s.slider} range={{draggableTrack: true}}\r\n                        defaultValue={[0, 10]}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./searchPack.module.css\"\r\n\r\n\r\nexport let Paginator = () => {\r\n\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from './Packs.module.css'\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {SearchPack} from \"../searchPack/SearchPack\";\r\nimport {Paginator} from \"../searchPack/Paginator\";\r\n\r\n\r\nconst Packs = () => {\r\n\r\n\r\n        return (\r\n            <div>\r\n                    <div>\r\n                        <input\r\n\r\n                            placeholder={'Enter name to new pack'}\r\n\r\n                            className={s.inputTitlePack}/>\r\n                        <Button label={'Save'}/></div>\r\n                <SearchPack/>\r\n                <table className={s.table}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Cards count</th>\r\n                        <th>Created</th>\r\n                        <th>Lest update</th>\r\n                        <th><Button label={'Add Pack'}/></th>\r\n                    </tr>\r\n                    </thead>\r\n                </table>\r\n                <Paginator/>\r\n            </div>\r\n        );\r\n}\r\n\r\n\r\nexport default Packs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './Cards.module.css'\r\nimport {Button} from \"../../common/Button/Button\";\r\nimport {SearchPack} from \"../searchPack/SearchPack\";\r\n\r\n\r\nconst Cards = () => {\r\n\r\n\r\n        return (\r\n            <div>\r\n\r\n                    <div>\r\n                        <input\r\n                            placeholder={'Enter question'}\r\n                            className={s.inputQuestion}/>\r\n                            <input\r\n                            placeholder={'Enter answer'}\r\n                            className={s.inputAnswer}/>\r\n                        <Button\r\n                            label={'Save'}/>\r\n                </div>\r\n\r\n                <SearchPack />\r\n                <table className={s.table}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>Answer</th>\r\n                        <th>Question</th>\r\n                        <th>Grade</th>\r\n                        <th>Shots</th>\r\n                        <th><Button\r\n                            label={'Add Pack'}/>\r\n                        </th>\r\n                    </tr>\r\n                    </thead>\r\n                </table>\r\n\r\n            </div>\r\n        );\r\n}\r\n\r\n\r\nexport default Cards;","import React, {useCallback, useState} from 'react';\r\nimport {Button} from '../../common/Button/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    forgotPasswordTC,\r\n    resetNewPassword,\r\n    resetPasswordInfo,\r\n    setForgotPasswordError\r\n} from \"../../../m2-bll/forgotReducer\";\r\nimport {AppRootStateType} from \"../../../m2-bll/store\";\r\nimport s from \"./ForgotPassword.module.css\";\r\nimport {useParams} from 'react-router-dom';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\n\r\n\r\nconst NewPassword = function ForgotPassword() {\r\n\r\n    const dispatch = useDispatch();\r\n    const info = useSelector((state: AppRootStateType) => state.forgotPassword.info);\r\n    const error = useSelector((state: AppRootStateType) => state.forgotPassword.error);\r\n    const {token} = useParams<{ token: string }>();\r\n\r\n\r\n    const [password, setPassword] = useState<string>(\"\");\r\n\r\n\r\n    const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value && e.currentTarget.value.trim() !== \"\") {\r\n            setPassword(e.currentTarget.value);\r\n        } else {\r\n            dispatch(setForgotPasswordError(error));\r\n        }\r\n    }\r\n\r\n    const onClickBtn = () => {\r\n        dispatch(resetNewPassword(password, token))\r\n        setPassword('')\r\n    }\r\n\r\n\r\n    if (info === \"setNewPassword success —ฅ/ᐠ.̫ .ᐟฅ—\") {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.forgotPasswordBlock}>\r\n            <div className={s.registerBlock}>\r\n                <p> Please enter new password and press \"Forgot password\" </p>\r\n                <div className={s.registerForm}>\r\n                    <label htmlFor={'password'}>Password ********</label>\r\n                    <div className={s.register}>\r\n                        <input\r\n                            onChange={handleChange}\r\n                            className={s.registerFormInput}\r\n                            type=\"password\"\r\n                            style={{\r\n                                display: \"block\",\r\n                                marginLeft: \"auto\",\r\n                                marginRight: 'auto',\r\n                                marginBottom: \"5px\",\r\n                                marginTop: \"5px\"\r\n                            }}\r\n                        />\r\n                    </div>\r\n                    <Button primary={true} onClick={onClickBtn} size={'small'} label={\"Forgot Password\"}/>\r\n                </div>\r\n                <div className={s.errorText}>{error}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default NewPassword;","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport Error404 from '../common/Error404';\r\nimport Registration from '../components/registration/Registration';\r\nimport ForgotPassword from '../components/forgotPassword/ForgotPassword';\r\nimport Profile from '../components/profile/Profile';\r\nimport {Login} from '../components/login/Login';\r\nimport Packs from '../components/packs/Packs';\r\nimport Cards from '../components/cards/Cards';\r\nimport NewPassword from '../components/forgotPassword/NewPassword';\r\n\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route exact path={'/'} render={() => <div> Hello</div>}/>\r\n                <Route exact path={'/registration'} render={() => <Registration/>}/>\r\n                <Route exact path={'/forgot-password'} render={() => <ForgotPassword/>}/>\r\n                <Route exact path={'/new-password/:token'} render={() => <NewPassword/>}/>\r\n                {/*<Route exact path={'/new-password/:token/$token$'} render={() => <Login/>}/>*/}\r\n                <Route exact path={'/profile'} render={() => <Profile/>}/>\r\n                <Route exact path={'/login'} render={() => <Login/>}/>\r\n                <Route exact path={'/packs'} render={() => <Packs/>}/>\r\n                <Route exact path={'/cards'} render={() => <Cards/>}/>\r\n                {/*<Route path={'/404'} render={() => <Error404/>}/>*/}\r\n                {/*<Redirect path={'*'} to={'/404'}/>*/}\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Routes;","export default __webpack_public_path__ + \"static/media/__Iphone-spinner-1.4c0dabf6.gif\";","import React from \"react\";\r\nimport spiner from '../Loader/__Iphone-spinner-1.gif'\r\nimport s from '../Loader/loading.module.css'\r\nconst  Loading = () => {\r\n    return (\r\n        <div>\r\n                     <div className={s.loadingStyle}><img src={spiner} alt=\"Be patient...\"/></div>\r\n        </div>\r\n\r\n);\r\n}\r\n\r\nexport default Loading;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport Header from \"./header/Header\";\r\nimport Routes from \"./routes/Routes\";\r\nimport {initializeAppTC} from \"../m2-bll/appReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../m2-bll/store\";\r\nimport Loading from \"./common/Loader/Loading\";\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n\r\n    let dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n    if (!isInitialized) {\r\n        return <Loading/>\r\n    }\r\n\r\n  return (\r\n      <HashRouter>\r\n    <div className=\"App\">\r\n      {/*// hashrouter //  provider*/}\r\n      <Header />\r\n      <Routes />\r\n    </div>\r\n      </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","type InitialStateType = {\r\n\r\n\r\n}\r\nconst initialState: any = {\r\n\r\n}\r\n\r\nexport const packReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\n//actions Paginator\r\n\r\n\r\n\r\n// thunks\r\nexport const getPacksTC = () => {\r\n\r\n}\r\nexport const addPackTC = () => {\r\n\r\n}\r\nexport const deletePackTC = () => {\r\n\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = any\r\n\r\n","const initialState = {\r\n    cards: [],\r\n    newCardsTitle: null,\r\n    id: ''\r\n}\r\n\r\nexport const cardsReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setCardsAC = (cards: Array<any>) => ({type: 'SET-CARDS', cards} as const)\r\nexport const addCardAC = (newCardTitle: string) => ({type: 'ADD-CARD', newCardTitle} as const)\r\nexport const deleteCardAC = (id: string) => ({type: 'DELETE-CARD', id} as const)\r\n\r\n\r\n// thunks\r\nexport const getCardsTC = (packId: string) => {\r\n\r\n}\r\nexport const addCardTC = (question: string, answer: string) => {\r\n\r\n}\r\n\r\n\r\n// types\r\n","import {Dispatch} from \"redux\";\r\n\r\n\r\ntype InitialStateType = {\r\n\r\n}\r\n\r\nconst initialState: any = {\r\n\r\n}\r\n\r\n\r\nexport const searchReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\n\r\nexport const searchTC = () => async (dispatch: Dispatch) => {\r\n\r\n}\r\n\r\n\r\n\r\n// types\r\ntype ActionsType = any","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {packReducer} from \"./packReducer\";\r\nimport {registerReducer} from \"./registerReducer\";\r\nimport {loginReducer} from \"./loginReducer\";\r\nimport { forgotReducer } from './forgotReducer';\r\nimport {cardsReducer} from \"./cardsReducer\";\r\nimport { searchReducer } from './searchReducer';\r\nimport {appReducer} from \"./appReducer\";\r\nimport {profileReducer} from \"./profileReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    packs: packReducer,\r\n    register: registerReducer,\r\n    login: loginReducer,\r\n    forgotPassword: forgotReducer,\r\n    cards: cardsReducer,\r\n    search: searchReducer,\r\n    app:appReducer,\r\n    profile:profileReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./n1-main/m2-bll/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n    <App />\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__1O6sh\",\"item\":\"Header_item__GiIPp\",\"active\":\"Header_active__Z6tEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"register\":\"Profile_register__3ytMS\",\"input\":\"Profile_input__3trVf\",\"errorText\":\"Profile_errorText__10sNh\",\"wrapProfile\":\"Profile_wrapProfile__1Dtd4\",\"wrapAva\":\"Profile_wrapAva__3yS0y\",\"wrapInfo\":\"Profile_wrapInfo__1K_wu\",\"infoBlock\":\"Profile_infoBlock__1m44S\",\"titles\":\"Profile_titles__3f-2N\",\"info\":\"Profile_info__1eLUi\",\"background\":\"Profile_background__2nYDH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerBlock\":\"ForgotPassword_registerBlock__fghVH\",\"registerForm\":\"ForgotPassword_registerForm__1-hc9\",\"forgotPasswordBlock\":\"ForgotPassword_forgotPasswordBlock__1lQja\",\"registerFormInput\":\"ForgotPassword_registerFormInput__3nQ19\",\"errorText\":\"ForgotPassword_errorText__2WLX5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerBlock\":\"Login_registerBlock__2Uu5g\",\"registerForm\":\"Login_registerForm__3GBjc\",\"background\":\"Login_background__1Qn11\",\"registerFormInput\":\"Login_registerFormInput__y_dVU\",\"errorText\":\"Login_errorText__2ADtf\",\"check\":\"Login_check__3joLj\",\"inputcheck\":\"Login_inputcheck__1Rzwc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registerBlock\":\"Registration_registerBlock__1TFUf\",\"registerForm\":\"Registration_registerForm__2kzUf\",\"background\":\"Registration_background__VAxOi\",\"registerFormInput\":\"Registration_registerFormInput__3T-iz\",\"errorText\":\"Registration_errorText__17V7X\",\"formSummaryError\":\"Registration_formSummaryError__1i2po\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchPack\":\"searchPack_searchPack__2zyY1\",\"search_table\":\"searchPack_search_table__3Baoe\",\"slider\":\"searchPack_slider__VJJRc\",\"paginator\":\"searchPack_paginator__AQbWI\",\"pageNumber\":\"searchPack_pageNumber__E3fWh\",\"selectedPage\":\"searchPack_selectedPage__2wQQ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Cards_table__OFubS\",\"inputTitlePack\":\"Cards_inputTitlePack__1vPh8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Packs_table__BgdN6\",\"inputTitlePack\":\"Packs_inputTitlePack__3maQP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingStyle\":\"loading_loadingStyle__2gCVt\"};"],"sourceRoot":""}